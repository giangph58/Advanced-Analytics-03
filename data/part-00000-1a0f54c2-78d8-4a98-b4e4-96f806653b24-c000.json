{"value":"{\"aid\": \"http://arxiv.org/abs/2503.24260v1\", \"title\": \"MaintainCoder: Maintainable Code Generation Under Dynamic Requirements\", \"summary\": \"Modern code generation has made significant strides in functional correctness\\nand execution efficiency. However, these systems often overlook a critical\\ndimension in real-world software development: maintainability. To handle\\ndynamic requirements with minimal rework, we propose MaintainCoder as a\\npioneering solution. It integrates Waterfall model, design patterns, and\\nmulti-agent collaboration to systematically enhance cohesion, reduce coupling,\\nand improve adaptability. We also introduce MaintainBench, a benchmark\\ncomprising requirement changes and corresponding dynamic metrics on\\nmaintainance effort. Experiments demonstrate that existing code generation\\nmethods struggle to meet maintainability standards when requirements evolve. In\\ncontrast, MaintainCoder improves maintainability metrics by 14-30% with even\\nhigher correctness, i.e. pass@k. Our work not only provides the foundation of\\nmaintainable code generation, but also highlights the need for more holistic\\ncode quality research. Resources:\\nhttps://github.com/IAAR-Shanghai/MaintainCoder.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE,cs.CL\", \"published\": \"2025-03-31T16:06:47Z\"}"}
