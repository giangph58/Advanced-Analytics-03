{"value":"{\"aid\": \"http://arxiv.org/abs/2503.23718v1\", \"title\": \"Detecting Functional Bugs in Smart Contracts through LLM-Powered and\\n  Bug-Oriented Composite Analysis\", \"summary\": \"Smart contracts are fundamental pillars of the blockchain, playing a crucial\\nrole in facilitating various business transactions. However, these smart\\ncontracts are vulnerable to exploitable bugs that can lead to substantial\\nmonetary losses. A recent study reveals that over 80% of these exploitable\\nbugs, which are primarily functional bugs, can evade the detection of current\\ntools. The primary issue is the significant gap between understanding the\\nhigh-level logic of the business model and checking the low-level\\nimplementations in smart contracts. Furthermore, identifying deeply rooted\\nfunctional bugs in smart contracts requires the automated generation of\\neffective detection oracles based on various bug features. To address these\\nchallenges, we design and implement PROMFUZZ, an automated and scalable system\\nto detect functional bugs, in smart contracts. In PROMFUZZ, we first propose a\\nnovel Large Language Model (LLM)-driven analysis framework, which leverages a\\ndual-agent prompt engineering strategy to pinpoint potentially vulnerable\\nfunctions for further scrutiny. We then implement a dual-stage coupling\\napproach, which focuses on generating invariant checkers that leverage logic\\ninformation extracted from potentially vulnerable functions. Finally, we design\\na bug-oriented fuzzing engine, which maps the logical information from the\\nhigh-level business model to the low-level smart contract implementations, and\\nperforms the bug-oriented fuzzing on targeted functions. We compare PROMFUZZ\\nwith multiple state-of-the-art methods. The results show that PROMFUZZ achieves\\n86.96% recall and 93.02% F1-score in detecting functional bugs, marking at\\nleast a 50% improvement in both metrics over state-of-the-art methods.\\nMoreover, we perform an in-depth analysis on real-world DeFi projects and\\ndetect 30 zero-day bugs. Up to now, 24 zero-day bugs have been assigned CVE\\nIDs.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE,cs.CR\", \"published\": \"2025-03-31T04:39:51Z\"}"}
