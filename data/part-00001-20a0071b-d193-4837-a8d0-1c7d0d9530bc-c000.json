{"value":"{\"aid\": \"http://arxiv.org/abs/2503.23791v1\", \"title\": \"LLMigrate: Transforming \\\"Lazy\\\" Large Language Models into Efficient\\n  Source Code Migrators\", \"summary\": \"Rewriting C code in Rust provides stronger memory safety, yet migrating large\\ncodebases such as the 32-million-line Linux kernel remains challenging. While\\nrule-based translators (e.g., C2Rust) provide accurate yet largely unsafe Rust\\nprograms, recent Large Language Model (LLM) approaches produce more idiomatic,\\nsafe Rust programs but frequently exhibit \\\"laziness\\\", omitting significant\\nportions of the target code. To address the issue, in this paper, we present\\nLLMigrate, an LLM-based C-to-Rust translation tool that splits modules into\\ndiscrete functions, translating them individually, and then reintegrating them.\\nLLMigrate uses static analysis to retain necessary context, pairs GPT-4o (a\\nstate-of-the-art LLM) with compiler-driven translation and program-repair\\ntechniques for complex core functions, and leverages call-graph-guided\\ntranslation to ensure consistent interfaces. Evaluations on three\\nrepresentative Linux kernel modules (math, sort, and ramfs) show that LLMigrate\\nrequires modifying less than 15\\\\% of the target code, significantly\\noutperforming a pure GPT-4o-based migration.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL,cs.SE\", \"published\": \"2025-03-31T07:09:07Z\"}"}
