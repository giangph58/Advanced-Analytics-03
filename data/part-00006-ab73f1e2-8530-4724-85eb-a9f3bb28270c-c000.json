{"value":"{\"aid\": \"http://arxiv.org/abs/2504.07585v1\", \"title\": \"High-Level Synthesis of Digital Circuits from Template Haskell and\\n  SDF-AP\", \"summary\": \"Functional languages as input specifications for High-Level Synthesis (HLS)\\ntools allow to specify data dependencies but do not contain a notion of time\\nnor execution order. In this paper, we propose a method to add this notion to\\nthe functional description using the dataflow model SDF-AP. SDF-AP consists of\\npatterns that express consumption and production that we can use to enforce\\nresource usage. We created an HLS-tool that can synthesize parallel hardware,\\nboth data and control path, based on the repetition, expressed in Higher-Order\\nFunctions, combined with specified SDF-AP patterns.\\n  Our HLS-tool, based on Template Haskell, generates an Abstract Syntax Tree\\nbased on the given patterns and the functional description uses the\\nClash-compiler to generate VHDL/Verilog.\\n  Case studies show consistent resource consumption and temporal behavior for\\nour HLS. A comparison with a commercially available HLS-tool shows that our HLS\\ntool outperforms in terms of latency and sometimes in resource consumption.\\n  The method and tool presented in this paper offer more transparency to the\\ndeveloper and allow to specify more accurately the synthesized hardware\\ncompared to what is possible with pragmas of the Vitis HLS-tool.\", \"main_category\": \"cs.AR\", \"categories\": \"cs.AR\", \"published\": \"2025-04-10T09:25:47Z\"}"}
