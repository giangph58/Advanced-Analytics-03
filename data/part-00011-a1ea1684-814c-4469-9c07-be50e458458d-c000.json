{"value":"{\"aid\": \"http://arxiv.org/abs/2504.04738v1\", \"title\": \"Automating the Search for Small Hard Examples to Approximation\\n  Algorithms\", \"summary\": \"Given an approximation algorithm $A$, we want to find the input with the\\nworst approximation ratio, i.e., the input for which $A$'s output's objective\\nvalue is the worst possible compared to the optimal solution's objective value.\\nSuch hard examples shed light on the approximation algorithm's weaknesses, and\\ncould help us design better approximation algorithms. When the inputs are\\ndiscrete (e.g., unweighted graphs), one can find hard examples for small input\\nsizes using brute-force enumeration. However, it's not obvious how to do this\\nwhen the input space is continuous, as in makespan minimization or bin packing.\\n  We develop a technique for finding small hard examples for a large class of\\napproximation algorithms. Our algorithm works by constructing a decision tree\\nrepresentation of the approximation algorithm and then running a linear program\\nfor each leaf node of the decision tree. We implement our technique in Python,\\nand demonstrate it on the longest-processing-time (LPT) heuristic for makespan\\nminimization.\", \"main_category\": \"cs.DS\", \"categories\": \"cs.DS\", \"published\": \"2025-04-07T05:32:37Z\"}"}
