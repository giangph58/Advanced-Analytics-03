{"value":"{\"aid\": \"http://arxiv.org/abs/2504.04757v1\", \"title\": \"The Complexity of Maximal Common Subsequence Enumeration\", \"summary\": \"Frequent pattern mining is widely used to find ``important'' or\\n``interesting'' patterns in data. While it is not easy to mathematically define\\nsuch patterns, maximal frequent patterns are promising candidates, as frequency\\nis a natural indicator of relevance and maximality helps to summarize the\\noutput. As such, their mining has been studied on various data types, including\\nitemsets, graphs, and strings. The complexity of mining maximal frequent\\nitemsets and subtrees has been thoroughly investigated (e.g., [Boros et al.,\\n2003], [Uno et al., 2004]) in the literature. On the other hand, while the idea\\nof mining frequent subsequences in sequential data was already introduced in\\nthe seminal paper [Agrawal et al., 1995], the complexity of the problem is\\nstill open.\\n  In this paper, we investigate the complexity of the maximal common\\nsubsequence enumeration problem, which is both an important special case of\\nmaximal frequent subsequence mining and a generalization of the classic longest\\ncommon subsequence (LCS) problem. We show the hardness of enumerating maximal\\ncommon subsequences between multiple strings, ruling out the possibility of an\\n\\\\emph{output-polynomial time} enumeration algorithm under $P \\\\neq NP$, that is,\\nan algorithm that runs in time ${\\\\rm poly}(|\\\\mathcal I| + N)$, where $|\\\\mathcal\\nI|$ and $N$ are the size of the input and number of output solutions,\\nrespectively. To circumvent this intractability, we also investigate the\\nparameterized complexity of the problem, and show several results when the\\nalphabet size, the number of strings, and the length of a string are taken into\\naccount as parameters.\", \"main_category\": \"cs.DS\", \"categories\": \"cs.DS,cs.CC\", \"published\": \"2025-04-07T06:11:33Z\"}"}
