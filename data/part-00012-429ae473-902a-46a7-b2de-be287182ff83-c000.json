{"value":"{\"aid\": \"http://arxiv.org/abs/2504.07033v1\", \"title\": \"A Uniform Framework for Handling Position Constraints in String Solving\\n  (Technical Report)\", \"summary\": \"We introduce a novel decision procedure for solving the class of position\\nstring constraints, which includes string disequalities, not-prefixof,\\nnot-suffixof, str.at, and not-str.at. These constraints are generated\\nfrequently in almost any application of string constraint solving. Our\\nprocedure avoids expensive encoding of the constraints to word equations and,\\ninstead, reduces the problem to checking conflicts on positions satisfying an\\ninteger constraint obtained from the Parikh image of a polynomial-sized finite\\nautomaton with a special structure. By the reduction to counting, solving\\nposition constraints becomes NP-complete and for some cases even falls into\\nPTime. This is much cheaper than the previously used techniques, which either\\nused reductions generating word equations and length constraints (for which\\nmodern string solvers use exponential-space algorithms) or incomplete\\ntechniques. Our method is relevant especially for automata-based string\\nsolvers, which have recently achieved the best results in terms of practical\\nefficiency, generality, and completeness guarantees. This work allows them to\\nexcel also on position constraints, which used to be their weakness. Besides\\nthe efficiency gains, we show that our framework may be extended to solve a\\nlarge fragment of not-contains (in NExpTime), for which decidability has been\\nlong open, and gives a hope to solve the general problem. Our implementation of\\nthe technique within the Z3-Noodler solver significantly improves its\\nperformance on position constraints.\", \"main_category\": \"cs.LO\", \"categories\": \"cs.LO,cs.FL\", \"published\": \"2025-04-09T16:47:37Z\"}"}
