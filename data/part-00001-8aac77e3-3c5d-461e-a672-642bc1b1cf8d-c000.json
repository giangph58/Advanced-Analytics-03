{"value":"{\"aid\": \"http://arxiv.org/abs/2504.07595v1\", \"title\": \"High-Level Synthesis using SDF-AP, Template Haskell, QuasiQuotes, and\\n  GADTs to Generate Circuits from Hierarchical Input Specification\", \"summary\": \"FPGAs provide highly parallel and customizable hardware solutions but are\\ntraditionally programmed using low-level Hardware Description Languages (HDLs)\\nlike VHDL and Verilog. These languages have a low level of abstraction and\\nrequire engineers to manage control and scheduling manually. High-Level\\nSynthesis (HLS) tools attempt to lift this level of abstraction by translating\\nC/C++ code into hardware descriptions, but their reliance on imperative\\nparadigms leads to challenges in deriving parallelism due to pointer aliasing\\nand sequential execution models.\\n  Functional programming, with its inherent purity, immutability, and\\nparallelism, presents a more natural abstraction for FPGA design. Existing\\nfunctional hardware description tools such as Clash enable high-level circuit\\ndescriptions but lack automated scheduling and control mechanisms. Prior work\\nby Folmer introduced a framework integrating SDF-AP graphs into Haskell for\\nautomatic hardware generation, but it lacked hierarchy and reusability.\\n  This paper extends that framework by introducing hierarchical pattern\\nspecification, enabling structured composition and scalable parallelism. Key\\ncontributions include: (1) automatic hardware generation, where both data and\\ncontrol paths are derived from functional specifications with hierarchical\\npatterns, (2) parameterized buffers using GADTs, eliminating the need for\\nmanual buffer definitions and facilitating component reuse, and (3) provision\\nof a reference \\\"golden model\\\" that can be simulated in the integrated\\nenvironment for validation.\\n  The core focus of this paper is on methodology. But we also evaluate our\\napproach against Vitis HLS, comparing both notation and resulting hardware\\narchitectures. Experimental results demonstrate that our method provides\\ngreater transparency in resource utilization and scheduling, often\\noutperforming Vitis in both scheduling and predictability.\", \"main_category\": \"cs.AR\", \"categories\": \"cs.AR\", \"published\": \"2025-04-10T09:48:22Z\"}"}
