{"value":"{\"aid\": \"http://arxiv.org/abs/2504.07483v1\", \"title\": \"Program Skeletons for Automated Program Translation\", \"summary\": \"Translating software between programming languages is a challenging task, for\\nwhich automated techniques have been elusive and hard to scale up to larger\\nprograms. A key difficulty in cross-language translation is that one has to\\nre-express the intended behavior of the source program into idiomatic\\nconstructs of a different target language. This task needs abstracting away\\nfrom the source language-specific details, while keeping the overall\\nfunctionality the same. In this work, we propose a novel and systematic\\napproach for making such translation amenable to automation based on a\\nframework we call program skeletons. A program skeleton retains the high-level\\nstructure of the source program by abstracting away and effectively summarizing\\nlower-level concrete code fragments, which can be mechanically translated to\\nthe target programming language. A skeleton, by design, permits many different\\nways of filling in the concrete implementation for fragments, which can work in\\nconjunction with existing data-driven code synthesizers. Most importantly,\\nskeletons can conceptually enable sound decomposition, i.e., if each individual\\nfragment is correctly translated, taken together with the mechanically\\ntranslated skeleton, the final translated program is deemed to be correct as a\\nwhole. We present a prototype system called Skel embodying the idea of\\nskeleton-based translation from Python to JavaScript. Our results show\\npromising scalability compared to prior works. For 9 real-world Python\\nprograms, some with more than about 1k lines of code, 95% of their code\\nfragments can be automatically translated, while about 5% require manual\\neffort. All the final translations are correct with respect to whole-program\\ntest suites.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL,cs.SE\", \"published\": \"2025-04-10T06:25:17Z\"}"}
