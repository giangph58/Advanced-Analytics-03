{"value":"{\"aid\": \"http://arxiv.org/abs/2504.10399v1\", \"title\": \"Unique Decoding of Reed-Solomon and Related Codes for Semi-Adversarial\\n  Errors\", \"summary\": \"For over a quarter century, the Guruswami-Sudan algorithm has served as the\\nstate-of-the-art for list-decoding Reed-Solomon (RS) codes up to the Johnson\\nbound against adversarial errors. However, some recent structural results on\\nthe combinatorial list decoding of randomly punctured Reed-Solomon codes\\nsuggest that Johnson bound can likely be broken for some subclasses of RS\\ncodes. Motivated by these results, we seek to make traction on understanding\\nadversarial decoding by considering a new model: semi-adversarial errors. This\\nerror model bridges between fully random errors and fully adversarial errors by\\nallowing some symbols of a message to be corrupted by an adversary while others\\nare replaced with uniformly random symbols.\\n  As our main quest, we seek to understand optimal efficient unique decoding\\nalgorithms in the semi-adversarial model. In particular, we revisit some\\nclassical results on decoding interleaved Reed-Solomon codes (aka subfield\\nevaluation RS codes) in the random error model by Bleichenbacher-Kiayias-Yung\\n(BKY) and work to improve and extend their analysis. First, we give an improved\\nimplementation and analysis of the BKY algorithm for interleaved Reed-Solomon\\ncodes in the semi-adversarial model. In particular, our algorithm runs in\\nnear-linear time, and for most mixtures of random and adversarial errors, our\\nanalysis matches the information-theoretic optimum.\\n  Moreover, inspired by the BKY algorithm, we use a novel interpolation to\\nextend our approach to the settings of folded Reed-Solomon codes, resulting in\\nfast algorithms for unique decoding against semi-adversarial errors. A\\nparticular advantage of our near-linear time algorithm over state-of-the-art\\ndecoding algorithms for adversarial errors is that its running time depends\\nonly on a polynomial function of the folding parameter rather than on an\\nexponential function.\", \"main_category\": \"cs.IT\", \"categories\": \"cs.IT,cs.DS,math.IT\", \"published\": \"2025-04-14T16:49:45Z\"}"}
