{"value":"{\"aid\": \"http://arxiv.org/abs/2505.04953v1\", \"title\": \"Zip-Tries: Simple Dynamic Data Structures for Strings\", \"summary\": \"In this paper, we introduce zip-tries, which are simple, dynamic,\\nmemory-efficient data structures for strings. Zip-tries support search and\\nupdate operations for $k$-length strings in $\\\\mathcal{O}(k+\\\\log n)$ time in the\\nstandard RAM model or in $\\\\mathcal{O}(k/\\\\alpha+\\\\log n)$ time in the word RAM\\nmodel, where $\\\\alpha$ is the length of the longest string that can fit in a\\nmemory word, and $n$ is the number of strings in the trie. Importantly, we show\\nhow zip-tries can achieve this while only requiring $\\\\mathcal{O}(\\\\log{\\\\log{n}}\\n+ \\\\log{\\\\log{\\\\frac{k}{\\\\alpha}}})$ bits of metadata per node w.h.p., which is an\\nexponential improvement over previous results for long strings. Despite being\\nconsiderably simpler and more memory efficient, we show how zip-tries perform\\ncompetitively with state-of-the-art data structures on large datasets of long\\nstrings.\\n  Furthermore, we provide a simple, general framework for parallelizing string\\ncomparison operations in linked data structures, which we apply to zip-tries to\\nobtain parallel zip-tries. Parallel zip-tries are able to achieve good search\\nand update performance in parallel, performing such operations in\\n$\\\\mathcal{O}(\\\\log{n})$ span. We also apply our techniques to an existing\\nexternal-memory string data structure, the string B-tree, obtaining a parallel\\nstring B-tree which performs search operations using $\\\\mathcal{O}(\\\\log_B{n})$\\nI/O span and $\\\\mathcal{O}(\\\\frac{k}{\\\\alpha B} + \\\\log_B{n})$ I/O work in the\\nparallel external memory (PEM) model. The parallel string B-tree can perform\\nprefix searches using only $\\\\mathcal{O}(\\\\frac{\\\\log{n}}{\\\\log{\\\\log{n}}})$ span\\nunder the practical PRAM model.\\n  For the case of long strings that share short common prefixes, we provide\\nLCP-aware variants of all our algorithms that should be quite efficient in\\npractice, which we justify empirically.\", \"main_category\": \"cs.DS\", \"categories\": \"cs.DS\", \"published\": \"2025-05-08T05:25:04Z\"}"}
