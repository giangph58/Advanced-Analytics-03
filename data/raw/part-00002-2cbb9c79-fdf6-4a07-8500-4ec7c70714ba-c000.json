{"value":"{\"aid\": \"http://arxiv.org/abs/2504.17381v1\", \"title\": \"Subtrajectory Clustering and Coverage Maximization in Cubic Time, or\\n  Better\", \"summary\": \"Many application areas collect unstructured trajectory data. In subtrajectory\\nclustering, one is interested to find patterns in this data using a hybrid\\ncombination of segmentation and clustering. We analyze two variants of this\\nproblem based on the well-known \\\\textsc{SetCover} and\\n\\\\textsc{CoverageMaximization} problems. In both variants the set system is\\ninduced by metric balls under the Fr\\\\'echet distance centered at polygonal\\ncurves. Our algorithms focus on improving the running time of the update step\\nof the generic greedy algorithm by means of a careful combination of sweeps\\nthrough a candidate space. In the first variant, we are given a polygonal curve\\n$P$ of complexity $n$, distance threshold $\\\\Delta$ and complexity bound $\\\\ell$\\nand the goal is to identify a minimum-size set of center curves $\\\\mathcal{C}$,\\nwhere each center curve is of complexity at most $\\\\ell$ and every point $p$ on\\n$P$ is covered. A point $p$ on $P$ is covered if it is part of a subtrajectory\\n$\\\\pi_p$ of $P$ such that there is a center $c\\\\in\\\\mathcal{C}$ whose Fr\\\\'echet\\ndistance to $\\\\pi_p$ is at most $\\\\Delta$. We present an approximation algorithm\\nfor this problem with a running time of $O((n^2\\\\ell +\\n\\\\sqrt{k_\\\\Delta}n^{5/2})\\\\log^2n)$, where $k_\\\\Delta$ is the size of an optimal\\nsolution. The algorithm gives a bicriterial approximation guarantee that\\nrelaxes the Fr\\\\'echet distance threshold by a constant factor and the size of\\nthe solution by a factor of $O(\\\\log n)$. The second problem variant asks for\\nthe maximum fraction of the input curve $P$ that can be covered using $k$\\ncenter curves, where $k\\\\leq n$ is a parameter to the algorithm. Here, we show\\nthat our techniques lead to an algorithm with a running time of\\n$O((k+\\\\ell)n^2\\\\log^2 n)$ and similar approximation guarantees. Note that in\\nboth algorithms $k,k_\\\\Delta\\\\in O(n)$ and hence the running time is cubic, or\\nbetter if $k\\\\ll n$.\", \"main_category\": \"cs.CG\", \"categories\": \"cs.CG,F.2.2\", \"published\": \"2025-04-24T08:58:26Z\"}"}
