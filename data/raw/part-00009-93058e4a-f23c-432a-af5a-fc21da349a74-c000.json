{"value":"{\"aid\": \"http://arxiv.org/abs/2504.17577v1\", \"title\": \"TileLang: A Composable Tiled Programming Model for AI Systems\", \"summary\": \"Modern AI workloads rely heavily on optimized computing kernels for both\\ntraining and inference. These AI kernels follow well-defined data-flow\\npatterns, such as moving tiles between DRAM and SRAM and performing a sequence\\nof computations on those tiles. However, writing high-performance kernels\\nremains complex despite the clarity of these patterns. Achieving peak\\nperformance requires careful, hardware-centric optimizations to fully leverage\\nmodern accelerators. While domain-specific compilers attempt to reduce the\\nburden of writing high-performance kernels, they often struggle with usability\\nand expressiveness gaps. In this paper, we present TileLang, a generalized\\ntiled programming model for more efficient AI Kernel programming. TileLang\\ndecouples scheduling space (thread binding, layout, tensorize and pipeline)\\nfrom dataflow, and encapsulated them as a set of customization annotations and\\nprimitives. This approach allows users to focus on the kernel's data-flow\\nitself, while leaving most other optimizations to compilers. We conduct\\ncomprehensive experiments on commonly-used devices, across numerous\\nexperiments, our evaluation shows that TileLang can achieve state-of-the-art\\nperformance in key kernels, demonstrating that its unified block-and-thread\\nparadigm and transparent scheduling capabilities deliver both the power and\\nflexibility demanded by modern AI system development.\", \"main_category\": \"cs.LG\", \"categories\": \"cs.LG\", \"published\": \"2025-04-24T14:08:49Z\"}"}
