{"value":"{\"aid\": \"http://arxiv.org/abs/2504.01742v1\", \"title\": \"Doctor: Optimizing Container Rebuild Efficiency by Instruction\\n  Re-Orchestration\", \"summary\": \"Containerization has revolutionized software deployment, with Docker leading\\nthe way due to its ease of use and consistent runtime environment. As Docker\\nusage grows, optimizing Dockerfile performance, particularly by reducing\\nrebuild time, has become essential for maintaining efficient CI/CD pipelines.\\nHowever, existing optimization approaches primarily address single builds\\nwithout considering the recurring rebuild costs associated with modifications\\nand evolution, limiting long-term efficiency gains. To bridge this gap, we\\npresent Doctor, a method for improving Dockerfile build efficiency through\\ninstruction re-ordering that addresses key challenges: identifying instruction\\ndependencies, predicting future modifications, ensuring behavioral equivalence,\\nand managing the optimization computational complexity. We developed a\\ncomprehensive dependency taxonomy based on Dockerfile syntax and a historical\\nmodification analysis to prioritize frequently modified instructions. Using a\\nweighted topological sorting algorithm, Doctor optimizes instruction order to\\nminimize future rebuild time while maintaining functionality. Experiments on\\n2,000 GitHub repositories show that Doctor improves 92.75% of Dockerfiles,\\nreducing rebuild time by an average of 26.5%, with 12.82% of files achieving\\nover a 50% reduction. Notably, 86.2% of cases preserve functional similarity.\\nThese findings highlight best practices for Dockerfile management, enabling\\ndevelopers to enhance Docker efficiency through informed optimization\\nstrategies.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE\", \"published\": \"2025-04-02T13:53:35Z\"}"}
