{"value":"{\"aid\": \"http://arxiv.org/abs/2504.17287v1\", \"title\": \"Combining Static and Dynamic Approaches for Mining and Testing\\n  Constraints for RESTful API Testing\", \"summary\": \"In API testing, deriving logical constraints on API response bodies is\\ncrucial in generating the test cases to cover various aspects of RESTful APIs.\\nHowever, existing approaches are limited to dynamic analysis in which\\nconstraints are extracted from the execution of APIs as part of the system\\nunder test. The key limitation of such a dynamic approach is its\\nunder-estimation in which inputs in API executions are not sufficiently diverse\\nto uncover actual constraints on API response bodies. In this paper, we propose\\nto combine a novel static analysis approach (in which the constraints for API\\nresponse bodies are mined from API specifications), with the dynamic approach\\n(which relies on API execution data). We leverage large language models (LLMs)\\nto comprehend the API specifications, mine constraints for response bodies, and\\ngenerate test cases. To reduce LLMs' hallucination, we apply an\\nObservation-Confirmation (OC) scheme which uses initial prompts to\\ncontextualize constraints. %, allowing subsequent prompts to more accurately\\nconfirm their presence. Our empirical results show that~LLMs with OC prompting\\nachieve high precision in constraint mining with the average of 91.2%. When\\ncombining static and dynamic analysis, our tool, RBCTest , achieves a precision\\nof 78.5%. RBCTest detects 107 constraints that the dynamic approach misses and\\n46 more precise constraints. We also use its generated test cases to detect 21\\nmismatches between the API specification and actual response data for 8\\nreal-world APIs. Four of the mismatches were, in fact, reported in developers'\\nforums.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE\", \"published\": \"2025-04-24T06:28:18Z\"}"}
