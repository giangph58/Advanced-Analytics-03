{"value":"{\"aid\": \"http://arxiv.org/abs/2504.16775v1\", \"title\": \"IsaBIL: A Framework for Verifying (In)correctness of Binaries in\\n  Isabelle/HOL (Extended Version)\", \"summary\": \"This paper presents IsaBIL, a binary analysis framework in Isabelle/HOL that\\nis based on the widely used Binary Analysis Platform (BAP). Specifically, in\\nIsaBIL, we formalise BAP's intermediate language, called BIL and integrate it\\nwith Hoare logic (to enable proofs of correctness) as well as incorrectness\\nlogic (to enable proofs of incorrectness). IsaBIL inherits the full flexibility\\nof BAP, allowing us to verify binaries for a wide range of languages (C, C++,\\nRust), toolchains (LLVM, Ghidra) and target architectures (x86, RISC-V), and\\ncan also be used when the source code for a binary is unavailable.\\n  To make verification tractable, we develop a number of big-step rules that\\ncombine BIL's existing small-step rules at different levels of abstraction to\\nsupport reuse. We develop high-level reasoning rules for RISC-V instructions\\n(our main target architecture) to further optimise verification. Additionally,\\nwe develop Isabelle proof tactics that exploit common patterns in C binaries\\nfor RISC-V to discharge large numbers of proof goals (often in the 100s)\\nautomatically. IsaBIL includes an Isabelle/ML based parser for BIL programs,\\nallowing one to automatically generate the associated Isabelle/HOL program\\nlocale from a BAP output. Taken together, IsaBIL provides a highly flexible\\nproof environment for program binaries. As examples, we prove correctness of\\nkey examples from the Joint Strike Fighter coding standards and the MITRE\\ndatabase.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-04-23T14:47:38Z\"}"}
