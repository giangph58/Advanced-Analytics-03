{"value":"{\"aid\": \"http://arxiv.org/abs/2504.07642v1\", \"title\": \"Cache-a-lot: Pushing the Limits of Unsatisfiable Core Reuse in SMT-Based\\n  Program Analysis\", \"summary\": \"Satisfiability Modulo Theories (SMT) solvers are integral to program analysis\\ntechniques like concolic and symbolic execution, where they help assess the\\nsatisfiability of logical formulae to explore execution paths of the program\\nunder test. However, frequent solver invocations are still the main performance\\nbottleneck of these techniques. One way to mitigate this challenge is through\\noptimizations such as caching and reusing solver results. While current methods\\ntypically focus on reusing results from fully equivalent or closely related\\nformulas, they often miss broader opportunities for reuse. In this paper, we\\npropose a novel approach, Cache-a-lot, that extends the reuse of unsatisfiable\\n(unsat) results by systematically considering all possible variable\\nsubstitutions. This enables more extensive reuse of results, thereby reducing\\nthe number of SMT solver invocations and improving the overall efficiency of\\nconcolic and symbolic execution. Our evaluation, conducted against the\\nstate-of-the-art Utopia solution using two benchmark sets, shows significant\\nimprovements, particularly with more complex formulas. Our method achieves up\\nto 74% unsat core reuse, compared to Utopia's 41%, and significant increase in\\nthe time savings. These results demonstrate that, despite the additional\\ncomputational complexity, the broader reuse of unsat results significantly\\nenhances performance, offering valuable advancements for formal verification\\nand program analysis.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE\", \"published\": \"2025-04-10T10:43:42Z\"}"}
