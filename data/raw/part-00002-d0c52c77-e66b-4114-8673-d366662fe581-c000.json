{"value":"{\"aid\": \"http://arxiv.org/abs/2504.10159v1\", \"title\": \"Monadic type-and-effect soundness\", \"summary\": \"We introduce the abstract notions of \\\"monadic operational semantics\\\", a\\nsmall-step semantics where computational effects are modularly modeled by a\\nmonad, and \\\"type-and-effect system\\\", including \\\"effect types\\\" whose\\ninterpretation lifts well-typedness to its monadic version. In this\\nmeta-theory, as usually done in the non-monadic case, we can express progress\\nand subject reduction properties and provide a proof, given once and for all,\\nthat they imply soundness. The approach is illustrated on a lambda calculus\\nwith generic effects. We equip the calculus with an expressive type-and-effect\\nsystem, and provide proofs of progress and subject reduction which are\\nparametric on the interpretation of effect types. In this way, we obtain as\\ninstances many significant examples, such as checking exceptions,\\npreventing/limiting non-determinism, constraining order/fairness of outputs on\\ndifferent locations. We also provide an extension with constructs to raise and\\nhandle computational effects, which can be instantiated to model different\\npolicies.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-04-14T12:13:44Z\"}"}
