{"value":"{\"aid\": \"http://arxiv.org/abs/2504.21458v1\", \"title\": \"An Intermediate Program Representation for Optimizing Stream-Based\\n  Languages\", \"summary\": \"Stream-based runtime monitors are safety assurance tools that check at\\nruntime whether the system's behavior satisfies a formal specification.\\nSpecifications consist of stream equations, which relate input streams,\\ncontaining sensor readings and other incoming information, to output streams,\\nrepresenting filtered and aggregated data. This paper presents a framework for\\nthe stream-based specification language RTLola. We introduce a new intermediate\\nrepresentation for stream-based languages, the StreamIR, which, like the\\nspecification language, operates on streams of unbounded length; while the\\nstream equations are replaced by imperative programs. We developed a set of\\noptimizations based on static analysis of the specification and have\\nimplemented an interpreter and a compiler for several target languages. In our\\nevaluation, we measure the performance of several real-world case studies. The\\nresults show that using the StreamIR framework reduces the runtime\\nsignificantly compared to the existing StreamIR interpreter. We evaluate the\\neffect of the optimizations and show that significant performance gains are\\npossible beyond the optimizations of the target language's compiler. While our\\ncurrent implementation is limited to RTLola, the StreamIR is designed to\\naccommodate other stream-based languages, enabling their interpretation and\\ncompilation into all available target languages.\", \"main_category\": \"cs.LO\", \"categories\": \"cs.LO,cs.PL\", \"published\": \"2025-04-30T09:24:53Z\"}"}
