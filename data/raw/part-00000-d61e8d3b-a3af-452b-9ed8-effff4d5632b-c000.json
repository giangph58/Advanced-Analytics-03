{"value":"{\"aid\": \"http://arxiv.org/abs/2504.01558v1\", \"title\": \"Scalable Equivalence Checking and Verification of Shallow Quantum\\n  Circuits\", \"summary\": \"This paper concerns the problem of checking if two shallow (i.e.,\\nconstant-depth) quantum circuits perform equivalent computations. Equivalence\\nchecking is a fundamental correctness question -- needed, e.g., for ensuring\\nthat transformations applied to a quantum circuit do not alter its behavior.\\nFor quantum circuits, the problem is challenging because a straightforward\\nrepresentation on a classical computer of each circuit's quantum state can\\nrequire time and space that are exponential in the number of qubits $n$.\\n  The paper presents decision procedures for two variants of the\\nequivalence-checking problem. Both can be carried out on a classical computer\\nin time and space that, for any fixed depth, is linear in $n$. Our critical\\ninsight is that local projections are precise enough to completely characterize\\nthe output state of a shallow quantum circuit. Instead of explicitly computing\\nthe output state of a circuit, we generate a set of local projections that\\nserve as constraints on the output state. Moreover, the circuit's output state\\nis the unique quantum state that satisfies all the constraints.\\n  Beyond equivalence checking, we show how to use the constraint representation\\nto check a class of assertions, both statically and at run time. Our\\nassertion-checking methods are sound and complete for assertions expressed as\\nconjunctions of local projections.\\n  Our experiments show that on a server equipped with 2 x\\nIntel\\\\textsuperscript{\\\\textregistered} Xeon\\\\textsuperscript{\\\\textregistered}\\nGold 6338 CPUs (128 threads total) and 1.0~TiB of RAM, running Ubuntu 20.04.6\\nLTS, the constraint representation of a random 100-qubit circuit of depth 6 can\\nbe computed in 19.8 seconds. For fixed inputs $\\\\ket{0}^{\\\\otimes 100}$,\\nequivalence checking of {random} 100-qubit circuits of depth 3 takes 4.46\\nseconds; for arbitrary inputs, it takes no more than 31.96 seconds.\", \"main_category\": \"quant-ph\", \"categories\": \"quant-ph,cs.PL\", \"published\": \"2025-04-02T09:58:45Z\"}"}
