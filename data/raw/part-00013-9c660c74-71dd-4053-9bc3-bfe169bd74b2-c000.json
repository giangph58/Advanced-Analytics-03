{"value":"{\"aid\": \"http://arxiv.org/abs/2504.15637v1\", \"title\": \"DR.FIX: Automatically Fixing Data Races at Industry Scale\", \"summary\": \"Data races are a prevalent class of concurrency bugs in shared-memory\\nparallel programs, posing significant challenges to software reliability and\\nreproducibility. While there is an extensive body of research on detecting data\\nraces and a wealth of practical detection tools across various programming\\nlanguages, considerably less effort has been directed toward automatically\\nfixing data races at an industrial scale. In large codebases, data races are\\ncontinuously introduced and exhibit myriad patterns, making automated fixing\\nparticularly challenging.\\n  In this paper, we tackle the problem of automatically fixing data races at an\\nindustrial scale. We present Dr.Fix, a tool that combines large language models\\n(LLMs) with program analysis to generate fixes for data races in real-world\\nsettings, effectively addressing a broad spectrum of racy patterns in complex\\ncode contexts. Implemented for Go--the programming language widely used in\\nmodern microservice architectures where concurrency is pervasive and data races\\nare common--Dr.Fix seamlessly integrates into existing development workflows.\\nWe detail the design of Dr.Fix and examine how individual design choices\\ninfluence the quality of the fixes produced. Over the past 18 months, Dr.Fix\\nhas been integrated into developer workflows at Uber demonstrating its\\npractical utility. During this period, Dr.Fix produced patches for 224 (55%)\\nfrom a corpus of 404 data races spanning various categories; 193 of these\\npatches (86%) were accepted by more than a hundred developers via code reviews\\nand integrated into the codebase.\", \"main_category\": \"cs.DC\", \"categories\": \"cs.DC,cs.AI,cs.LG,cs.PL,cs.SE\", \"published\": \"2025-04-22T06:56:15Z\"}"}
