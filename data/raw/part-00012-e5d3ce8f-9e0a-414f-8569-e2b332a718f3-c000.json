{"value":"{\"aid\": \"http://arxiv.org/abs/2504.15948v1\", \"title\": \"Automated Vulnerability Injection in Solidity Smart Contracts: A\\n  Mutation-Based Approach for Benchmark Development\", \"summary\": \"The security of smart contracts is critical in blockchain systems, where even\\nminor vulnerabilities can lead to substantial financial losses. Researchers\\nproposed several vulnerability detection tools evaluated using existing\\nbenchmarks. However, most benchmarks are outdated and focus on a narrow set of\\nvulnerabilities. This work evaluates whether mutation seeding can effectively\\ninject vulnerabilities into Solidity-based smart contracts and whether\\nstate-of-the-art static analysis tools can detect the injected flaws. We aim to\\nautomatically inject vulnerabilities into smart contracts to generate large and\\nwide benchmarks. We propose MuSe, a tool to generate vulnerable smart contracts\\nby leveraging pattern-based mutation operators to inject six vulnerability\\ntypes into real-world smart contracts. We analyzed these vulnerable smart\\ncontracts using Slither, a static analysis tool, to determine its capacity to\\nidentify them and assess their validity. The results show that each\\nvulnerability has a different injection rate. Not all smart contracts can\\nexhibit some vulnerabilities because they lack the prerequisites for injection.\\nFurthermore, static analysis tools fail to detect all vulnerabilities injected\\nusing pattern-based mutations, underscoring the need for enhancements in static\\nanalyzers and demonstrating that benchmarks generated by mutation seeding tools\\ncan improve the evaluation of detection tools.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE\", \"published\": \"2025-04-22T14:46:18Z\"}"}
