{"value":"{\"aid\": \"http://arxiv.org/abs/2504.21803v1\", \"title\": \"An Empirical Study on the Effectiveness of Large Language Models for\\n  Binary Code Understanding\", \"summary\": \"Binary code analysis plays a pivotal role in the field of software security\\nand is widely used in tasks such as software maintenance, malware detection,\\nsoftware vulnerability discovery, patch analysis, etc. However, unlike source\\ncode, reverse engineers face significant challenges in understanding binary\\ncode due to the lack of intuitive semantic information. Although traditional\\nreverse tools can convert binary code into C-like pseudo code, the lack of code\\ncomments and symbolic information such as function names still makes code\\nunderstanding difficult. In recent years, two groups of techniques have shown\\npromising prospects: (1) Deep learning-based techniques have demonstrated\\ncompetitive results in tasks related to binary code understanding, furthermore,\\n(2) Large Language Models (LLMs) have been extensively pre-trained at the\\nsource-code level for tasks such as code understanding and generation. This has\\nleft participants wondering about the capabilities of LLMs in binary code\\nunderstanding. To this end, this work proposes a benchmark to evaluate the\\neffectiveness of LLMs in real-world reverse engineering scenarios, which covers\\ntwo key binary code understanding tasks, i.e., function name recovery and\\nbinary code summarization. To more comprehensively evaluate, we include\\nbinaries with multiple target architectures as well as different optimization\\noptions. We gain valuable insights into the capabilities and limitations\\nthrough extensive empirical studies of popular LLMs using our benchmark. Our\\nevaluations reveal that existing LLMs can understand binary code to a certain\\nextent, thereby improving the efficiency of binary code analysis. Our results\\nhighlight the great potential of the LLMs in advancing the field of binary code\\nunderstanding, and provide new directions for binary code analysis techniques.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE,cs.CR\", \"published\": \"2025-04-30T17:02:06Z\"}"}
