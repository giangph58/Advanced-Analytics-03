{"value":"{\"aid\": \"http://arxiv.org/abs/2504.21394v1\", \"title\": \"Concurrency Testing in the Linux Kernel via eBPF\", \"summary\": \"Concurrency is vital for our critical software to meet modern performance\\nrequirements, yet concurrency bugs are notoriously difficult to detect and\\nreproduce. Controlled Concurrency Testing (CCT) can make bugs easier to expose\\nby enabling control over thread interleavings and systematically exploring the\\ninterleaving space through scheduling algorithms. However, existing CCT\\nsolutions for kernel code are heavyweight, leading to significant performance,\\nmaintainability and extensibility issues. In this work, we introduce LACE, a\\nlightweight CCT framework for kernel code empowered by eBPF. Without hypervisor\\nmodification, LACE features a custom scheduler tailored for CCT algorithms to\\nserialize non-determistic thread execution into a controlled ordering. LACE\\nalso provides a mechanism to safely inject scheduling points into the kernel\\nfor fine-grained control. Furthermore, LACE employs a two-phase mutation\\nstrategy to integrate the scheduler with a concurrency fuzzer, allowing for\\nautomated exploration of both the input and schedule space. In our evaluation,\\nLACE achieves 38\\\\% more branches, 57\\\\% overhead reduction and 11.4$\\\\times$\\nspeed-up in bug exposure compared to the state-of-the-art kernel concurrency\\nfuzzers. Our qualitative analysis also demonstrates the extensibility and\\nmaintainability of LACE. Furthermore, LACE discovers eight previously unknown\\nbugs in the Linux kernel, with six confirmed by developers.\", \"main_category\": \"cs.OS\", \"categories\": \"cs.OS\", \"published\": \"2025-04-30T07:48:52Z\"}"}
