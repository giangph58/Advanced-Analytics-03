{"value":"{\"aid\": \"http://arxiv.org/abs/2503.23759v1\", \"title\": \"Word Break on SLP-Compressed Texts\", \"summary\": \"Word Break is a prototypical factorization problem in string processing:\\nGiven a word $w$ of length $N$ and a dictionary $\\\\mathcal{D} = \\\\{d_1, d_2,\\n\\\\ldots, d_{K}\\\\}$ of $K$ strings, determine whether we can partition $w$ into\\nwords from $\\\\mathcal{D}$. We propose the first algorithm that solves the Word\\nBreak problem over the SLP-compressed input text $w$. Specifically, we show\\nthat, given the string $w$ represented using an SLP of size $g$, we can solve\\nthe Word Break problem in $\\\\mathcal{O}(g \\\\cdot m^{\\\\omega} + M)$ time, where $m\\n= \\\\max_{i=1}^{K} |d_i|$, $M = \\\\sum_{i=1}^{K} |d_i|$, and $\\\\omega \\\\geq 2$ is the\\nmatrix multiplication exponent. We obtain our algorithm as a simple corollary\\nof a more general result: We show that in $\\\\mathcal{O}(g \\\\cdot m^{\\\\omega} + M)$\\ntime, we can index the input text $w$ so that solving the Word Break problem\\nfor any of its substrings takes $\\\\mathcal{O}(m^2 \\\\log N)$ time (independent of\\nthe substring length). Our second contribution is a lower bound: We prove that,\\nunless the Combinatorial $k$-Clique Conjecture fails, there is no combinatorial\\nalgorithm for Word Break on SLP-compressed strings running in $\\\\mathcal{O}(g\\n\\\\cdot m^{2-\\\\epsilon} + M)$ time for any $\\\\epsilon > 0$.\", \"main_category\": \"cs.DS\", \"categories\": \"cs.DS\", \"published\": \"2025-03-31T06:19:05Z\"}"}
