{"value":"{\"aid\": \"http://arxiv.org/abs/2504.21312v1\", \"title\": \"Annotating and Auditing the Safety Properties of Unsafe Rust\", \"summary\": \"Unsafe code is a critical topic in ensuring the security of system software\\ndevelopment in Rust. It is the sole source of potential undefined behaviors,\\nassuming the compiler is sound. To avoid the misuse of unsafe code, Rust\\ndevelopers should provide clear safety property annotations for unsafe APIs.\\nHowever, there is limited official guidance and few best practices for\\nannotating unsafe code. Even the current best practices for safety property\\nannotations in the Rust standard library are ad hoc and informal. In this\\npaper, we design a domain-specific language to describe the safety properties\\nof unsafe APIs, which may serve as a precursor for automated verification in\\nthe future. Furthermore, to ensure that the caller of an unsafe API properly\\ndelegates the safety property required by the callee, we propose a novel\\nunsafety propagation graph to model the usage and propagation of unsafe code.\\nBased on this graph, we further introduce a method to partition the graph into\\nsmaller graphs, such that each graph serves as a self-contained audit unit for\\nexamining the soundness of unsafe code encapsulation and safety property\\nannotation. We applied our approach to the Rust standard library, and the\\nexperimental results demonstrate that our method is both practical and\\neffective. Additionally, we have fixed safety property description issues in 23\\nAPIs.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-04-30T04:53:35Z\"}"}
