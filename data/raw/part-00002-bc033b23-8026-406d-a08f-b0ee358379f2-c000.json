{"value":"{\"aid\": \"http://arxiv.org/abs/2504.12953v1\", \"title\": \"How to get Rid of SQL, Relational Algebra, the Relational Model, ERM,\\n  and ORMs in a Single Paper -- A Thought Experiment\", \"summary\": \"Without any doubt, the relational paradigm has been a huge success. At the\\nsame time, we believe that the time is ripe to rethink how database systems\\ncould look like if we designed them from scratch. Would we really end up with\\nthe same abstractions and techniques that are prevalent today? This paper\\nexplores that space. We discuss the various issues with both the relational\\nmodel(RM) and the entity-relationship model (ERM). We provide a unified data\\nmodel: the relational map type model (RMTM) which can represent both RM and ERM\\nas special cases and overcomes all of their problems. We proceed to identify\\nseven rules that an RMTM query language (QL) must fulfill and provide a\\nfoundation of a language fulfilling all seven rules. Our QL operates on maps\\nwhich may represent tuples, relations, databases or sets of databases. Like\\nthat we dramatically expand the existing operational abstractions found in SQL\\nand relational algebra (RA) which only operate on relations/tables. In fact, RA\\nis just a special case of our much more generic approach. This work has\\nfar-reaching consequences: we show a path how to come up with a modern QL that\\nsolves (almost if not) all problems of SQL. Our QL is much more expressive than\\nSQL and integrates smoothly into existing programming languages (PL). We also\\nshow results of an initial experiment showcasing that just by switching to our\\ndata model, and without changing the underlying query processing algorithms, we\\ncan achieve speed-ups of up to a factor 3. We will conclude that, if we build a\\ndatabase system from scratch, we could and should do this without SQL, RA, RM,\\nERM, and ORMs.\", \"main_category\": \"cs.DB\", \"categories\": \"cs.DB\", \"published\": \"2025-04-17T13:55:41Z\"}"}
