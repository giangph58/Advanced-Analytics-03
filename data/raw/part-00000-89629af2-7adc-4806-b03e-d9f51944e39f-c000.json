{"value":"{\"aid\": \"http://arxiv.org/abs/2505.00620v1\", \"title\": \"Beyond Affine Loops: A Geometric Approach to Program Synthesis\", \"summary\": \"Ensuring software correctness remains a fundamental challenge in formal\\nprogram verification. One promising approach relies on finding polynomial\\ninvariants for loops. Polynomial invariants are properties of a program loop\\nthat hold before and after each iteration. Generating polynomial invariants is\\na crucial task for loops, but it is an undecidable problem in the general case.\\nRecently, an alternative approach to this problem has emerged, focusing on\\nsynthesizing loops from invariants. However, existing methods only synthesize\\naffine loops without guard conditions from polynomial invariants. In this\\npaper, we address a more general problem, allowing loops to have polynomial\\nupdate maps with a given structure, inequations in the guard condition, and\\npolynomial invariants of arbitrary form.\\n  In this paper, we use algebraic geometry tools to design and implement an\\nalgorithm that computes a finite set of polynomial equations whose solutions\\ncorrespond to all loops satisfying the given polynomial invariants. In other\\nwords, we reduce the problem of synthesizing loops to finding solutions of\\npolynomial systems within a specified subset of the complex numbers. The latter\\nis handled in our software using an SMT solver.\", \"main_category\": \"cs.SC\", \"categories\": \"cs.SC,math.AG\", \"published\": \"2025-05-01T15:56:34Z\"}"}
