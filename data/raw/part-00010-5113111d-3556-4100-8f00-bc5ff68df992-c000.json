{"value":"{\"aid\": \"http://arxiv.org/abs/2504.12246v1\", \"title\": \"Branching Bisimulation Learning\", \"summary\": \"We introduce a bisimulation learning algorithm for non-deterministic\\ntransition systems. We generalise bisimulation learning to systems with bounded\\nbranching and extend its applicability to model checking branching-time\\ntemporal logic, while previously it was limited to deterministic systems and\\nmodel checking linear-time properties. Our method computes a finite\\nstutter-insensitive bisimulation quotient of the system under analysis,\\nrepresented as a decision tree. We adapt the proof rule for well-founded\\nbisimulations to an iterative procedure that trains candidate decision trees\\nfrom sample transitions of the system, and checks their validity over the\\nentire transition relation using SMT solving. This results in a new technology\\nfor model checking CTL* without the next-time operator. Our technique is sound,\\nentirely automated, and yields abstractions that are succinct and effective for\\nformal verification and system diagnostics. We demonstrate the efficacy of our\\nmethod on diverse benchmarks comprising concurrent software, communication\\nprotocols and robotic scenarios. Our method performs comparably to mature tools\\nin the special case of LTL model checking, and outperforms the state of the art\\nin CTL and CTL* model checking for systems with very large and countably\\ninfinite state space.\", \"main_category\": \"cs.LO\", \"categories\": \"cs.LO\", \"published\": \"2025-04-16T16:52:07Z\"}"}
