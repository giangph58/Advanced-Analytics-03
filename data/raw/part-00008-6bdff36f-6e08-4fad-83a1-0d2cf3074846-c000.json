{"value":"{\"aid\": \"http://arxiv.org/abs/2504.21679v1\", \"title\": \"Canonicalization for Unreproducible Builds in Java\", \"summary\": \"The increasing complexity of software supply chains and the rise of supply\\nchain attacks have elevated concerns around software integrity. Users and\\nstakeholders face significant challenges in validating that a given software\\nartifact corresponds to its declared source. Reproducible Builds address this\\nchallenge by ensuring that independently performed builds from identical source\\ncode produce identical binaries. However, achieving reproducibility at scale\\nremains difficult, especially in Java, due to a range of non-deterministic\\nfactors and caveats in the build process. In this work, we focus on\\nreproducibility in Java-based software, archetypal of enterprise applications.\\nWe introduce a conceptual framework for reproducible builds, we analyze a large\\ndataset from Reproducible Central, and we develop a novel taxonomy of six root\\ncauses of unreproducibility. We study actionable mitigations: artifact and\\nbytecode canonicalization using OSS-Rebuild and jNorm respectively. Finally, we\\npresent Chains-Rebuild, a tool that raises reproducibility success from 9.48%\\nto 26.89% on 12,283 unreproducible artifacts. To sum up, our contributions are\\nthe first large-scale taxonomy of build unreproducibility causes in Java, a\\npublicly available dataset of unreproducible builds, and Chains-Rebuild, a\\ncanonicalization tool for mitigating unreproducible builds in Java.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE\", \"published\": \"2025-04-30T14:17:54Z\"}"}
