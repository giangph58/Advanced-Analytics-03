{"value":"{\"aid\": \"http://arxiv.org/abs/2504.11208v1\", \"title\": \"Slice+Slice Baby: Generating Last-Level Cache Eviction Sets in the Blink\\n  of an Eye\", \"summary\": \"An essential step for mounting cache attacks is finding eviction sets,\\ncollections of memory locations that contend on cache space. On Intel\\nprocessors, one of the main challenges for identifying contending addresses is\\nthe sliced cache design, where the processor hashes the physical address to\\ndetermine where in the cache a memory location is stored. While past works have\\ndemonstrated that the hash function can be reversed, they also showed that it\\ndepends on physical address bits that the adversary does not know.\\n  In this work, we make three main contributions to the art of finding eviction\\nsets. We first exploit microarchitectural races to compare memory access times\\nand identify the cache slice to which an address maps. We then use the known\\nhash function to both reduce the error rate in our slice identification method\\nand to reduce the work by extrapolating slice mappings to untested memory\\naddresses. Finally, we show how to propagate information on eviction sets\\nacross different page offsets for the hitherto unexplored case of non-linear\\nhash functions.\\n  Our contributions allow for entire LLC eviction set generation in 0.7 seconds\\non the Intel i7-9850H and 1.6 seconds on the i9-10900K, both using non-linear\\nfunctions. This represents a significant improvement compared to\\nstate-of-the-art techniques taking 9x and 10x longer, respectively.\", \"main_category\": \"cs.CR\", \"categories\": \"cs.CR\", \"published\": \"2025-04-15T14:11:38Z\"}"}
