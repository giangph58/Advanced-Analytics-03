{"value":"{\"aid\": \"http://arxiv.org/abs/2504.07578v1\", \"title\": \"Privacy-Preserving Vertical K-Means Clustering\", \"summary\": \"Clustering is a fundamental data processing task used for grouping records\\nbased on one or more features. In the vertically partitioned setting, data is\\ndistributed among entities, with each holding only a subset of those features.\\nA key challenge in this scenario is that computing distances between records\\nrequires access to all distributed features, which may be privacy-sensitive and\\ncannot be directly shared with other parties. The goal is to compute the joint\\nclusters while preserving the privacy of each entity's dataset. Existing\\nsolutions using secret sharing or garbled circuits implement privacy-preserving\\nvariants of Lloyd's algorithm but incur high communication costs, scaling as\\nO(nkt), where n is the number of data points, k the number of clusters, and t\\nthe number of rounds. These methods become impractical for large datasets or\\nseveral parties, limiting their use to LAN settings only. On the other hand, a\\ndifferent line of solutions rely on differential privacy (DP) to outsource the\\nlocal features of the parties to a central server. However, they often\\nsignificantly degrade the utility of the clustering outcome due to excessive\\nnoise. In this work, we propose a novel solution based on homomorphic\\nencryption and DP, reducing communication complexity to O(n+kt). In our method,\\nparties securely outsource their features once, allowing a computing party to\\nperform clustering operations under encryption. DP is applied only to the\\nclusters' centroids, ensuring privacy with minimal impact on utility. Our\\nsolution clusters 100,000 two-dimensional points into five clusters using only\\n73MB of communication, compared to 101GB for existing works, and completes in\\njust under 3 minutes on a 100Mbps network, whereas existing works take over 1\\nday. This makes our solution practical even for WAN deployments, all while\\nmaintaining accuracy comparable to plaintext k-means algorithms.\", \"main_category\": \"cs.CR\", \"categories\": \"cs.CR,cs.LG\", \"published\": \"2025-04-10T09:20:56Z\"}"}
