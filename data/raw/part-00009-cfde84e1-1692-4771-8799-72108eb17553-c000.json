{"value":"{\"aid\": \"http://arxiv.org/abs/2504.10345v1\", \"title\": \"AraOS: Analyzing the Impact of Virtual Memory Management on Vector Unit\\n  Performance\", \"summary\": \"Vector processor architectures offer an efficient solution for accelerating\\ndata-parallel workloads (e.g., ML, AI), reducing instruction count, and\\nenhancing processing efficiency. This is evidenced by the increasing adoption\\nof vector ISAs, such as Arm's SVE/SVE2 and RISC-V's RVV, not only in\\nhigh-performance computers but also in embedded systems. The open-source nature\\nof RVV has particularly encouraged the development of numerous vector processor\\ndesigns across industry and academia. However, despite the growing number of\\nopen-source RVV processors, there is a lack of published data on their\\nperformance in a complex application environment hosted by a full-fledged\\noperating system (Linux). In this work, we add OS support to the open-source\\nbare-metal Ara2 vector processor (AraOS) by sharing the MMU of CVA6, the scalar\\ncore used for instruction dispatch to Ara2, and integrate AraOS into the\\nopen-source Cheshire SoC platform. We evaluate the performance overhead of\\nvirtual-to-physical address translation by benchmarking matrix multiplication\\nkernels across several problem sizes and translation lookaside buffer (TLB)\\nconfigurations in CVA6's shared MMU, providing insights into vector performance\\nin a full-system environment with virtual memory. With at least 16 TLB entries,\\nthe virtual memory overhead remains below 3.5%. Finally, we benchmark a 2-lane\\nAraOS instance with the open-source RiVEC benchmark suite for RVV\\narchitectures, with peak average speedups of 3.2x against scalar-only\\nexecution.\", \"main_category\": \"cs.AR\", \"categories\": \"cs.AR\", \"published\": \"2025-04-14T15:53:11Z\"}"}
