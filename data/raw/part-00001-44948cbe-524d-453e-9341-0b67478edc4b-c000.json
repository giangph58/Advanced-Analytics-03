{"value":"{\"aid\": \"http://arxiv.org/abs/2504.07485v1\", \"title\": \"Rendering Large Volume Datasets in Unreal Engine 5: A Survey\", \"summary\": \"In this technical report, we discuss several approaches to in-core rendering\\nof large volumetric datasets in Unreal Engine 5 (UE5). We explore the following\\nmethods: the TBRayMarcher Plugin, the Niagara Fluids Plugin , and various\\napproaches using Sparse Volume Textures (SVT), with a particular focus on\\nHeterogeneous Volumes (HV). We found the HV approach to be the most promising.\\nThe biggest challenge we encountered with other approaches was the need to\\nchunk datasets so that each fits into volume textures smaller than one\\ngigavoxel. While this enables display of the entire dataset at reasonable frame\\nrates, it introduces noticeable artifacts at chunk borders due to incorrect\\nlighting, as each chunk lacks information about its neighbors. After addressing\\nsome (signed) int32 overflows in the Engine's SVT-related source code by\\nconverting them to to (unsigned) uint32 or int64, the SVT-based HV system\\nallows us to render sparse datasets up to 32k x 32k x 16k voxels, provided the\\ncompressed tile data (including MIP data and padding for correct interpolation)\\ndoes not exceed 4 gigavoxels. In the future, we intend to extend the existing\\nSVT streaming functionality to support out-of-core rendering, in order to\\neventually overcome VRAM limitations, graphics API constraints, and the\\nperformance issues associated with 64-bit arithmetic in GPU shaders.\", \"main_category\": \"cs.GR\", \"categories\": \"cs.GR\", \"published\": \"2025-04-10T06:42:19Z\"}"}
