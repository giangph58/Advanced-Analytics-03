{"value":"{\"aid\": \"http://arxiv.org/abs/2504.16519v1\", \"title\": \"Exciton Basis Description of Ultrafast Triplet Separation in\\n  Pentacene-(Tetracene)2-Pentacene Intramolecular Singlet Fission Chromophore\", \"summary\": \"Precise understanding of the electronic structures of optically dark\\ntriplet-triplet multiexcitons that are the intermediate states in singlet\\nfission (SF) continues to be a challenge. This is particularly true for\\nintramolecular singlet fission (iSF) chromophores, that are oligomers of large\\nmonomer molecules. We have performed quantum many-body calculations of the\\ncomplete set of excited states relevant to iSF in\\nPentacene-(Tetracene)2-Pentacene oligomers, consisting of two terminal\\npentacene monomers linked by two tetracene monomers. Our computations use an\\nexciton basis that gives physical pictorial descriptions of all eigenstates,\\nand are performed over an active space of twenty-eight monomer molecular\\norbitals, including configuration interaction with all relevant quadruple\\nexcitations within the active space, thereby ensuring very high precision. We\\ndiscuss the many-electron structures of the optical predominantly intramonomer\\nspin-singlets, intermonomer charge-transfer excitations, and most importantly,\\nthe complete set of low energy covalent triplet-triplet multiexcitons. We are\\nable to explain the weak binding energy of the pentacene-tetracene\\ntriplet-triplet eigenstate that is generated following photoexcitation. We\\nexplain the increase in lifetime with increasing numbers of tetracene monomers\\nof the transient absorption associated with contiguous pentacene-tetracene\\ntriplet-triplet in this family of oligomers. We are consequently able to give a\\npictorial description of the triplet separation following generation of the\\ninitial triplet-triplet, leading to a state with individual triplets occupying\\nonly the two pentacene monomers. We expect many applications of our theoretical\\napproach to triplet separation.\", \"main_category\": \"cond-mat.mtrl-sci\", \"categories\": \"cond-mat.mtrl-sci\", \"published\": \"2025-04-23T08:44:23Z\"}"}
{"value":"{\"aid\": \"http://arxiv.org/abs/2504.16536v1\", \"title\": \"Synthesiz3 This: an SMT-Based Approach for Synthesis with Uncomputable\\n  Symbols\", \"summary\": \"Program synthesis is the task of automatically constructing a program\\nconforming to a given specification. In this paper we focus on synthesis of\\nsingle-invocation recursion-free functions conforming to a specification given\\nas a logical formula in the presence of uncomputable symbols (i.e., symbols\\nused in the specification but not allowed in the resulting function). We\\napproach the problem via SMT-solving methods: we present a quantifier\\nelimination algorithm using model-based projections for both total and partial\\nfunction synthesis, working with theories of uninterpreted functions and linear\\narithmetic and their combination. For this purpose we also extend model-based\\nprojection to produce witnesses for these theories. Further, we present\\nprocedures tailored for the case of uniquely determined solutions. We\\nimplemented a prototype of the algorithms using the SMT-solver Z3,\\ndemonstrating their practicality.\", \"main_category\": \"cs.LO\", \"categories\": \"cs.LO\", \"published\": \"2025-04-23T09:06:26Z\"}"}
{"value":"{\"aid\": \"http://arxiv.org/abs/2504.16552v1\", \"title\": \"DTVM: Revolutionizing Smart Contract Execution with Determinism and\\n  Compatibility\", \"summary\": \"We introduce the DeTerministic Virtual Machine (DTVM) Stack, a\\nnext-generation smart contract execution framework designed to address critical\\nperformance, determinism, and ecosystem compatibility challenges in blockchain\\nnetworks. Building upon WebAssembly (Wasm) while maintaining full Ethereum\\nVirtual Machine (EVM) ABI compatibility, DTVM introduces a Deterministic Middle\\nIntermediate Representation (dMIR) and a hybrid lazy-JIT compilation engine to\\nbalance compilation speed and execution efficiency. DTVM further accommodates\\ndiverse instruction set architectures (e.g., EVM, RISC-V) through modular\\nadaptation layers. This enables seamless integration with DTVM's hybrid\\nlazy-JIT compilation engine, which dynamically optimizes performance while\\npreserving deterministic execution guarantees across heterogeneous\\nenvironments. The key contributions including: 1). The framework achieves up to\\n2$\\\\times$ acceleration over evmone in dominant Ethereum contract (e.g.\\nERC20/721/1155) execution and reduces fibonacci computation latency by\\n11.8$\\\\sim$40.5% compared to Wasm based VMs. 2). A novel trampoline hot-switch\\nmechanism enables sub-millisecond (0.95ms) post-deployment invocation times,\\noutperforming up to about 23$\\\\times$ in compilation and invocation efficiency.\\n3). It supports multi-language development (Solidity, C++, Rust, Java, Go, and\\nAssemblyScript) through unified bytecode conversion while maintaining EVM ABI\\ncompatibility for seamless invocation. It reduces machine code object sizes by\\n30.0$\\\\sim$72.6%, coupled with a minimized Trusted Computing Base. 4). It offers\\nSmartCogent, an AI-driven full-stack development experience, leveraging\\nfine-tuned LLMs and retrieval-augmented generation to automate tasks across the\\nsmart contract lifecycle: development, debugging, security auditing, and\\ndeployment. DTVM Stack has been open-sourced (https://github.com/DTVMStack).\", \"main_category\": \"cs.DC\", \"categories\": \"cs.DC\", \"published\": \"2025-04-23T09:28:09Z\"}"}
