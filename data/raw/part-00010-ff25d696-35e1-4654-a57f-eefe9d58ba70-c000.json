{"value":"{\"aid\": \"http://arxiv.org/abs/2504.15936v1\", \"title\": \"An effectful object calculus\", \"summary\": \"We show how to smoothly incorporate in the object-oriented paradigm\\nconstructs to raise, compose, and handle effects in an arbitrary monad. The\\nunderlying pure calculus is meant to be a representative of the last generation\\nof OO languages, and the effectful extension is manageable enough for ordinary\\nprogrammers; notably, constructs to raise effects are just special methods. We\\nequip the calculus with an expressive type-and-effect system, which, again by\\nrelying on standard features such as inheritance and generic types, allows a\\nsimple form of effect polymorphism. The soundness of the type-and-effect system\\nis expressed and proved by a recently introduced technique, where the semantics\\nis formalized by a one-step reduction relation from language expressions into\\nmonadic ones, so that it is enough to prove progress and subject reduction\\nproperties on this relation.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-04-22T14:24:59Z\"}"}
