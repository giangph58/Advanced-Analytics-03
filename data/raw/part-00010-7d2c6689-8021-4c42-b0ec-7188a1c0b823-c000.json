{"value":"{\"aid\": \"http://arxiv.org/abs/2504.17514v1\", \"title\": \"Secure Network Function Computation for Linear Functions, Part II:\\n  Target-Function Security\", \"summary\": \"In this Part II of a two-part paper, we put forward secure network function\\ncomputation, where in a directed acyclic network, a sink node is required to\\ncompute a target function of which the inputs are generated as source messages\\nat multiple source nodes, while a wiretapper, who can access any one but not\\nmore than one wiretap set in a given collection of wiretap sets, is not allowed\\nto obtain any information about a security function of the source messages. In\\nPart I of the two-part paper, we have investigated securely computing linear\\nfunctions with the wiretapper who can eavesdrop any edge subset up to a certain\\nsize r, referred to as the security level, where the security function is the\\nidentity function. The notion of this security is called source security. In\\nthe current paper, we consider another interesting model which is the same as\\nthe above one except that the security function is identical to the target\\nfunction, i.e., we need to protect the information on the target function from\\nbeing leaked to the wiretapper. The notion of this security is called\\ntarget-function security. We first prove a non-trivial upper bound on the\\nsecure computing capacity, which is applicable to arbitrary network topologies\\nand arbitrary security levels. In particular, when the security level r is\\nequal to 0, the upper bound reduces to the computing capacity without security\\nconsideration. Further, from an algebraic point of view, we prove two\\nequivalent conditions for target-function security and source security for the\\nexistence of the corresponding linear function-computing secure network codes.\\nWith them, for any linear function over a given finite field, we develop a code\\nconstruction of linear secure network codes for target-function security and\\nthus obtain a lower bound on the secure computing capacity; and also generalize\\nthe code construction developed in Part I for source security.\", \"main_category\": \"cs.IT\", \"categories\": \"cs.IT,math.IT\", \"published\": \"2025-04-24T12:57:20Z\"}"}
