{"value":"{\"aid\": \"http://arxiv.org/abs/2503.24273v1\", \"title\": \"Generating Mitigations for Downstream Projects to Neutralize Upstream\\n  Library Vulnerability\", \"summary\": \"Third-party libraries are essential in software development as they prevent\\nthe need for developers to recreate existing functionalities. However,\\nvulnerabilities within these libraries pose significant risks to dependent\\nprojects. Upgrading dependencies to secure versions is not feasible to\\nneutralize vulnerabilities without patches or in projects with specific version\\nrequirements. Moreover, repairing the vulnerability proves challenging when the\\nsource code of the library is inaccessible. Both the state-of-the-art automatic\\nvulnerability repair and automatic program repair methods fail to address this\\nissue. Therefore, mitigating library vulnerabilities without source code and\\navailable patches is crucial for a swift response to potential security\\nattacks. Existing tools encounter challenges concerning generalizability and\\nfunctional security. In this study, we introduce LUMEN to mitigate library\\nvulnerabilities in impacted projects. Upon disclosing a vulnerability, we\\nretrieve existing workarounds to gather a resembling mitigation strategy. In\\ncases where a resembling strategy is absent, we propose type-based strategies\\nbased on the vulnerability reproducing behavior and extract essential\\ninformation from the vulnerability report to guide mitigation generation. Our\\nassessment of LUMEN spans 121 impacted functions of 40 vulnerabilities,\\nsuccessfully mitigating 70.2% of the functions, which substantially outperforms\\nour baseline in neutralizing vulnerabilities without functionality loss.\\nAdditionally, we conduct an ablation study to validate the rationale behind our\\nresembling strategies and type-based strategies.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE\", \"published\": \"2025-03-31T16:20:29Z\"}"}
