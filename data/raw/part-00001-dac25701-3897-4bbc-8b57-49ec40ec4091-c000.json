{"value":"{\"aid\": \"http://arxiv.org/abs/2504.06854v1\", \"title\": \"TXSQL: Lock Optimizations Towards High Contented Workloads (Extended\\n  Version)\", \"summary\": \"Two-phase locking (2PL) is a fundamental and widely used concurrency control\\nprotocol. It regulates concurrent access to database data by following a\\nspecific sequence of acquiring and releasing locks during transaction\\nexecution, thereby ensuring transaction isolation. However, in strict 2PL,\\ntransactions must wait for conflicting transactions to commit and release their\\nlocks, which reduces concurrency and system throughput. We have observed this\\nissue is exacerbated in high-contented workloads at Tencent, where lock\\ncontention can severely degrade system performance. While existing\\noptimizations demonstrate some effectiveness in high-contention scenarios,\\ntheir performance remains insufficient, as they suffer from lock contention and\\nwaiting in hotspot access.\\n  This paper presents optimizations in lock management implemented in Tencent's\\ndatabase, TXSQL, with a particular focus on high-contention scenarios. First,\\nwe discuss our motivations and the journey toward general lock optimization,\\nwhich includes lightweight lock management, a copy-free active transaction\\nlist, and queue locking mechanisms that effectively enhance concurrency.\\nSecond, we introduce a hotspot-aware approach that enables certain highly\\nconflicting transactions to switch to a group locking method, which groups\\nconflicting transactions at a specific hotspot, allowing them to execute\\nserially in an uncommitted state within a conflict group without the need for\\nlocking, thereby reducing lock contention. Our evaluation shows that under\\nhigh-contented workloads, TXSQL achieves performance improvements of up to 6.5x\\nand up to 22.3x compared to state-of-the-art methods and systems, respectively.\", \"main_category\": \"cs.DB\", \"categories\": \"cs.DB\", \"published\": \"2025-04-09T13:07:22Z\"}"}
