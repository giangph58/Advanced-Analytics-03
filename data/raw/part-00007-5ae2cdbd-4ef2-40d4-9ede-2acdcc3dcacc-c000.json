{"value":"{\"aid\": \"http://arxiv.org/abs/2504.10438v1\", \"title\": \"Streaming Democratized: Ease Across the Latency Spectrum with Delayed\\n  View Semantics and Snowflake Dynamic Tables\", \"summary\": \"Streaming data pipelines remain challenging and expensive to build and\\nmaintain, despite significant advancements in stronger consistency, event time\\nsemantics, and SQL support over the last decade. Persistent obstacles continue\\nto hinder usability, such as the need for manual incrementalization, semantic\\ndiscrepancies across SQL implementations, and the lack of enterprise-grade\\noperational features. While the rise of incremental view maintenance (IVM) as a\\nway to integrate streaming with databases has been a huge step forward,\\ntransaction isolation in the presence of IVM remains underspecified, leaving\\nthe maintenance of application-level invariants as a painful exercise for the\\nuser. Meanwhile, most streaming systems optimize for latencies of 100 ms to 3\\nsec, whereas many practical use cases are well-served by latencies ranging from\\nseconds to tens of minutes.\\n  We present delayed view semantics (DVS), a conceptual foundation that bridges\\nthe semantic gap between streaming and databases, and introduce Dynamic Tables,\\nSnowflake's declarative streaming transformation primitive designed to\\ndemocratize analytical stream processing. DVS formalizes the intuition that\\nstream processing is primarily a technique to eagerly compute derived results\\nasynchronously, while also addressing the need to reason about the resulting\\nsystem end to end. Dynamic Tables then offer two key advantages: ease of use\\nthrough DVS, enterprise-grade features, and simplicity; as well as scalable\\ncost efficiency via IVM with an architecture designed for diverse latency\\nrequirements.\\n  We first develop extensions to transaction isolation that permit the\\npreservation of invariants in streaming applications. We then detail the\\nimplementation challenges of Dynamic Tables and our experience operating it at\\nscale. Finally, we share insights into user adoption and discuss our vision for\\nthe future of stream processing.\", \"main_category\": \"cs.DB\", \"categories\": \"cs.DB\", \"published\": \"2025-04-14T17:29:56Z\"}"}
