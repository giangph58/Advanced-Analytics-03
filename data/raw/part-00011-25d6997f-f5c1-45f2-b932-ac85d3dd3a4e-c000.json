{"value":"{\"aid\": \"http://arxiv.org/abs/2504.06079v1\", \"title\": \"Geometric Bipartite Matching Based Exact Algorithms for Server Problems\", \"summary\": \"For any given metric space, obtaining an offline optimal solution to the\\nclassical $k$-server problem can be reduced to solving a minimum-cost partial\\nbipartite matching between two point sets $A$ and $B$ within that metric space.\\n  For $d$-dimensional $\\\\ell_p$ metric space, we present an $\\\\tilde{O}(\\\\min\\\\{nk,\\nn^{2-\\\\frac{1}{2d+1}}\\\\log \\\\Delta\\\\}\\\\cdot \\\\Phi(n))$ time algorithm for solving\\nthis instance of minimum-cost partial bipartite matching; here, $\\\\Delta$\\nrepresents the spread of the point set, and $\\\\Phi(n)$ is the query/update time\\nof a $d$-dimensional dynamic weighted nearest neighbor data structure. Our\\nalgorithm improves upon prior algorithms that require at least\\n$\\\\Omega(nk\\\\Phi(n))$ time. The design of minimum-cost (partial) bipartite\\nmatching algorithms that make sub-quadratic queries to a weighted\\nnearest-neighbor data structure, even for bounded spread instances, is a major\\nopen problem in computational geometry. We resolve this problem at least for\\nthe instances that are generated by the offline version of the $k$-server\\nproblem.\\n  Our algorithm employs a hierarchical partitioning approach, dividing the\\npoints of $A\\\\cup B$ into rectangles. It maintains a minimum-cost partial\\nmatching where any point $b \\\\in B$ is either matched to a point $a\\\\in A$ or to\\nthe boundary of the rectangle it is located in. The algorithm involves\\niteratively merging pairs of rectangles by erasing the shared boundary between\\nthem and recomputing the minimum-cost partial matching. This continues until\\nall boundaries are erased and we obtain the desired minimum-cost partial\\nmatching of $A$ and $B$. We exploit geometry in our analysis to show that each\\npoint participates in only $\\\\tilde{O}(n^{1-\\\\frac{1}{2d+1}}\\\\log \\\\Delta)$ number\\nof augmenting paths, leading to a total execution time of\\n$\\\\tilde{O}(n^{2-\\\\frac{1}{2d+1}}\\\\Phi(n)\\\\log \\\\Delta)$.\", \"main_category\": \"cs.CG\", \"categories\": \"cs.CG\", \"published\": \"2025-04-08T14:19:12Z\"}"}
