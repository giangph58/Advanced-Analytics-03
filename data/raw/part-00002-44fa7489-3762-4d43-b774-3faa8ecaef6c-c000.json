{"value":"{\"aid\": \"http://arxiv.org/abs/2504.15958v1\", \"title\": \"FreeGraftor: Training-Free Cross-Image Feature Grafting for\\n  Subject-Driven Text-to-Image Generation\", \"summary\": \"Subject-driven image generation aims to synthesize novel scenes that\\nfaithfully preserve subject identity from reference images while adhering to\\ntextual guidance, yet existing methods struggle with a critical trade-off\\nbetween fidelity and efficiency. Tuning-based approaches rely on time-consuming\\nand resource-intensive subject-specific optimization, while zero-shot methods\\nfail to maintain adequate subject consistency. In this work, we propose\\nFreeGraftor, a training-free framework that addresses these limitations through\\ncross-image feature grafting. Specifically, FreeGraftor employs semantic\\nmatching and position-constrained attention fusion to transfer visual details\\nfrom reference subjects to the generated image. Additionally, our framework\\nincorporates a novel noise initialization strategy to preserve geometry priors\\nof reference subjects for robust feature matching. Extensive qualitative and\\nquantitative experiments demonstrate that our method enables precise subject\\nidentity transfer while maintaining text-aligned scene synthesis. Without\\nrequiring model fine-tuning or additional training, FreeGraftor significantly\\noutperforms existing zero-shot and training-free approaches in both subject\\nfidelity and text alignment. Furthermore, our framework can seamlessly extend\\nto multi-subject generation, making it practical for real-world deployment. Our\\ncode is available at https://github.com/Nihukat/FreeGraftor.\", \"main_category\": \"cs.CV\", \"categories\": \"cs.CV\", \"published\": \"2025-04-22T14:55:23Z\"}"}
{"value":"{\"aid\": \"http://arxiv.org/abs/2504.15976v1\", \"title\": \"ad-trait: A Fast and Flexible Automatic Differentiation Library in Rust\", \"summary\": \"The Rust programming language is an attractive choice for robotics and\\nrelated fields, offering highly efficient and memory-safe code. However, a key\\nlimitation preventing its broader adoption in these domains is the lack of\\nhigh-quality, well-supported Automatic Differentiation (AD)-a fundamental\\ntechnique that enables convenient derivative computation by systematically\\naccumulating data during function evaluation. In this work, we introduce\\nad-trait, a new Rust-based AD library. Our implementation overloads Rust's\\nstandard floating-point type with a flexible trait that can efficiently\\naccumulate necessary information for derivative computation. The library\\nsupports both forward-mode and reverse-mode automatic differentiation, making\\nit the first operator-overloading AD implementation in Rust to offer both\\noptions. Additionally, ad-trait leverages Rust's performance-oriented features,\\nsuch as Single Instruction, Multiple Data acceleration in forward-mode AD, to\\nenhance efficiency. Through benchmarking experiments, we show that our library\\nis among the fastest AD implementations across several programming languages\\nfor computing derivatives. Moreover, it is already integrated into a Rust-based\\nrobotics library, where we showcase its ability to facilitate fast optimization\\nprocedures. We conclude with a discussion of the limitations and broader\\nimplications of our work.\", \"main_category\": \"cs.RO\", \"categories\": \"cs.RO\", \"published\": \"2025-04-22T15:23:53Z\"}"}
