{"value":"{\"aid\": \"http://arxiv.org/abs/2504.20461v1\", \"title\": \"Efficient Graph-Based Approximate Nearest Neighbor Search Achieving: Low\\n  Latency Without Throughput Loss\", \"summary\": \"The increase in the dimensionality of neural embedding models has enhanced\\nthe accuracy of semantic search capabilities but also amplified the\\ncomputational demands for Approximate Nearest Neighbor Searches (ANNS). This\\ncomplexity poses significant challenges in online and interactive services,\\nwhere query latency is a critical performance metric. Traditional graph-based\\nANNS methods, while effective for managing large datasets, often experience\\nsubstantial throughput reductions when scaled for intra-query parallelism to\\nminimize latency. This reduction is largely due to inherent inefficiencies in\\nthe conventional fork-join parallelism model.\\n  To address this problem, we introduce AverSearch, a novel parallel\\ngraph-based ANNS framework that overcomes these limitations through a fully\\nasynchronous architecture. Unlike existing frameworks that struggle with\\nbalancing latency and throughput, AverSearch utilizes a dynamic workload\\nbalancing mechanism that supports continuous, dependency-free processing. This\\napproach not only minimizes latency by eliminating unnecessary synchronization\\nand redundant vertex processing but also maintains high throughput levels. Our\\nevaluations across various datasets, including both traditional benchmarks and\\nmodern large-scale model generated datasets, show that AverSearch consistently\\noutperforms current state-of-the-art systems. It achieves up to 2.1-8.9 times\\nhigher throughput at comparable latency levels across different datasets and\\nreduces minimum latency by 1.5 to 1.9 times.\", \"main_category\": \"cs.DC\", \"categories\": \"cs.DC\", \"published\": \"2025-04-29T06:50:20Z\"}"}
