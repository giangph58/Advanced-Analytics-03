{"value":"{\"aid\": \"http://arxiv.org/abs/2505.05292v1\", \"title\": \"QUIC-Exfil: Exploiting QUIC's Server Preferred Address Feature to\\n  Perform Data Exfiltration Attacks\", \"summary\": \"The QUIC protocol is now widely adopted by major tech companies and accounts\\nfor a significant fraction of today's Internet traffic. QUIC's multiplexing\\ncapabilities, encrypted headers, dynamic IP address changes, and encrypted\\nparameter negotiations make the protocol not only more efficient, secure, and\\ncensorship-resistant, but also practically unmanageable by firewalls. This\\nopens doors for attackers who may exploit certain traits of the QUIC protocol\\nto perform targeted attacks, such as data exfiltration attacks. Whereas\\nexisting data exfiltration techniques, such as TLS and DNS-based exfiltration,\\ncan be detected on a firewall level, QUIC-based data exfiltration is more\\ndifficult to detect, since changes in IP addresses and ports are inherent to\\nthe protocol's normal behavior. To show the feasibility of a QUIC-based data\\nexfiltration attack, we introduce a novel method leveraging the server\\npreferred address feature of the QUIC protocol and, thus, allows an attacker to\\nexfiltrate sensitive data from an infected machine to a malicious server,\\ndisguised as a server-side connection migration. The attack is implemented as a\\nproof of concept tool in Rust. We evaluated the performance of five anomaly\\ndetection classifiers - Random Forest, Multi-Layer Perceptron, Support Vector\\nMachine, Autoencoder, and Isolation Forest - trained on datasets collected from\\nthree network traffic scenarios. The classifiers were trained on over 700K\\nbenign and malicious QUIC packets and 786 connection migration events, but were\\nunable to detect the data exfiltration attempts. Furthermore, post-analysis of\\nthe traffic captures did not reveal any identifiable fingerprint. As part of\\nour evaluation, we also interviewed five leading firewall vendors and found\\nthat, as of today, no major firewall vendor implements functionality capable of\\ndistinguishing between benign and malicious QUIC connection migrations.\", \"main_category\": \"cs.CR\", \"categories\": \"cs.CR\", \"published\": \"2025-05-08T14:31:28Z\"}"}
