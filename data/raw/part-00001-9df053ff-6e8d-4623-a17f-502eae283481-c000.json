{"value":"{\"aid\": \"http://arxiv.org/abs/2505.03693v1\", \"title\": \"A Sequent Calculus For Trace Formula Implication\", \"summary\": \"Specification languages are essential in deductive program verification, but\\nthey are usually based on first-order logic, hence less expressive than the\\nprograms they specify. Recently, trace specification logics with fixed points\\nthat are at least as expressive as their target programs were proposed. This\\nmakes it possible to specify not merely pre- and postconditions, but the whole\\ntrace of even recursive programs. Previous work established a sound and\\ncomplete calculus to determine whether a program satisfies a given trace\\nformula. However, the applicability of the calculus and prospects for\\nmechanized verification rely on the ability to prove consequence between trace\\nformulas. We present a sound sequent calculus for proving implication (i.e.\\ntrace inclusion) between trace formulas. To handle fixed point operations with\\nan unknown recursive bound, fixed point induction rules are used. We also\\nemploy contracts and {\\\\mu}-formula synchronization. While this does not yet\\nresult in a complete calculus for trace formula implication, it is possible to\\nprove many non-trivial properties.\", \"main_category\": \"cs.LO\", \"categories\": \"cs.LO\", \"published\": \"2025-05-06T16:58:40Z\"}"}
