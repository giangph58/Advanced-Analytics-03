{"value":"{\"aid\": \"http://arxiv.org/abs/2504.17428v1\", \"title\": \"Detection, Classification and Prevalence of Self-Admitted Aging Debt\", \"summary\": \"Context: Previous research on software aging is limited with focus on dynamic\\nruntime indicators like memory and performance, often neglecting evolutionary\\nindicators like source code comments and narrowly examining legacy issues\\nwithin the TD context. Objective: We introduce the concept of Aging Debt (AD),\\nrepresenting the increased maintenance efforts and costs needed to keep\\nsoftware updated. We study AD through Self-Admitted Aging Debt (SAAD) observed\\nin source code comments left by software developers. Method: We employ a\\nmixed-methods approach, combining qualitative and quantitative analyses to\\ndetect and measure AD in software. This includes framing SAAD patterns from the\\nsource code comments after analysing the source code context, then utilizing\\nthe SAAD patterns to detect SAAD comments. In the process, we develop a\\ntaxonomy for SAAD that reflects the temporal aging of software and its\\nassociated debt. Then we utilize the taxonomy to quantify the different types\\nof AD prevalent in OSS repositories. Results: Our proposed taxonomy categorizes\\ntemporal software aging into Active and Dormant types. Our extensive analysis\\nof over 9,000+ Open Source Software (OSS) repositories reveals that more than\\n21% repositories exhibit signs of SAAD as observed from our gold standard SAAD\\ndataset. Notably, Dormant AD emerges as the predominant category, highlighting\\na critical but often overlooked aspect of software maintenance. Conclusion: As\\nsoftware volume grows annually, so do evolutionary aging and maintenance\\nchallenges; our proposed taxonomy can aid researchers in detailed software\\naging studies and help practitioners develop improved and proactive maintenance\\nstrategies.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE,cs.AI,cs.CE,cs.GL\", \"published\": \"2025-04-24T10:38:55Z\"}"}
