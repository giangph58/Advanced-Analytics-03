{"value":"{\"aid\": \"http://arxiv.org/abs/2505.03555v1\", \"title\": \"Empc: Effective Path Prioritization for Symbolic Execution with Path\\n  Cover\", \"summary\": \"Symbolic execution is a powerful program analysis technique that can formally\\nreason the correctness of program behaviors and detect software bugs. It can\\nsystematically explore the execution paths of the tested program. But it\\nsuffers from an inherent limitation: path explosion. Path explosion occurs when\\nsymbolic execution encounters an overwhelming number (exponential to the\\nprogram size) of paths that need to be symbolically reasoned. It severely\\nimpacts the scalability and performance of symbolic execution. To tackle this\\nproblem, previous works leverage various heuristics to prioritize paths for\\nsymbolic execution. They rank the exponential number of paths using static\\nrules or heuristics and explore the paths with the highest rank. However, in\\npractice, these works often fail to generalize to diverse programs. In this\\nwork, we propose a novel and effective path prioritization technique with path\\ncover, named Empc. Our key insight is that not all paths need to be\\nsymbolically reasoned. Unlike traditional path prioritization, our approach\\nleverages a small subset of paths as a minimum path cover (MPC) that can cover\\nall code regions of the tested programs. To encourage diversity in path\\nprioritization, we compute multiple MPCs. We then guide the search for symbolic\\nexecution on the small number of paths inside multiple MPCs rather than the\\nexponential number of paths. We implement our technique Empc based on KLEE. We\\nconduct a comprehensive evaluation of Empc to investigate its performance in\\ncode coverage, bug findings, and runtime overhead. The evaluation shows that\\nEmpc can cover 19.6% more basic blocks than KLEE's best search strategy and\\n24.4% more lines compared to the state-of-the-art work cgs. Empc also finds 24\\nmore security violations than KLEE's best search strategy. Meanwhile, Empc can\\nsignificantly reduce the memory usage of KLEE by up to 93.5%.\", \"main_category\": \"cs.CR\", \"categories\": \"cs.CR\", \"published\": \"2025-05-06T14:08:36Z\"}"}
