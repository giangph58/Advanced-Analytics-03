{"value":"{\"aid\": \"http://arxiv.org/abs/2504.19551v1\", \"title\": \"BinCoFer: Three-Stage Purification for Effective C/C++ Binary\\n  Third-Party Library Detection\", \"summary\": \"Third-party libraries (TPL) are becoming increasingly popular to achieve\\nefficient and concise software development. However, unregulated use of TPL\\nwill introduce legal and security issues in software development. Consequently,\\nsome studies have attempted to detect the reuse of TPLs in target programs by\\nconstructing a feature repository. Most of the works require access to the\\nsource code of TPLs, while the others suffer from redundancy in the repository,\\nlow detection efficiency, and difficulties in detecting partially referenced\\nthird-party libraries. Therefore, we introduce BinCoFer, a tool designed for\\ndetecting TPLs reused in binary programs. We leverage the work of binary code\\nsimilarity detection(BCSD) to extract binary-format TPL features, making it\\nsuitable for scenarios where the source code of TPLs is inaccessible. BinCoFer\\nemploys a novel three-stage purification strategy to mitigate feature\\nrepository redundancy by highlighting core functions and extracting\\nfunction-level features, making it applicable to scenarios of partial reuse of\\nTPLs. We have observed that directly using similarity threshold to determine\\nthe reuse between two binary functions is inaccurate, a problem that previous\\nwork has not addressed. Thus we design a method that uses weight to aggregate\\nthe similarity between functions in the target binary and core functions to\\nultimately judge the reuse situation with high frequency. To examine the\\nability of BinCoFer, we compiled a dataset on ArchLinux and conduct comparative\\nexperiments on it with other four most related works (i.e., ModX, B2SFinder,\\nLibAM and BinaryAI)...\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE\", \"published\": \"2025-04-28T07:57:42Z\"}"}
