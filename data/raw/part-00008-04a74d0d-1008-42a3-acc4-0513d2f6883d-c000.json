{"value":"{\"aid\": \"http://arxiv.org/abs/2504.17460v1\", \"title\": \"A Lightweight Method for Generating Multi-Tier JIT Compilation Virtual\\n  Machine in a Meta-Tracing Compiler Framework\", \"summary\": \"Meta-compiler frameworks, such as RPython and Graal/Truffle, generate\\nhigh-performance virtual machines (VMs) from interpreter definitions. Although\\nthey generate VMs with high-quality just-in-time (JIT) compilers, they still\\nlack an important feature that dedicated VMs (i.e., VMs that are developed for\\nspecific languages) have, namely \\\\emph{multi-tier compilation}. Multi-tier\\ncompilation uses light-weight compilers at early stages and highly-optimizing\\ncompilers at later stages in order to balance between compilation overheads and\\ncode quality.\\n  We propose a novel approach to enabling multi-tier compilation in the VMs\\ngenerated by a meta-compiler framework. Instead of extending the JIT compiler\\nbackend of the framework, our approach drives an existing (heavyweight)\\ncompiler backend in the framework to quickly generate unoptimized native code\\nby merely embedding directives and compile-time operations into interpreter\\ndefinitions.\\n  As a validation of the approach, we developed 2SOM, a Simple Object Machine\\nwith a two-tier JIT compiler based on RPython. 2SOM first applies the tier-1\\nthreaded code generator that is generated by our proposed technique, then, to\\nthe loops that exceed a threshold, applies the tier-2 tracing JIT compiler that\\nis generated by the original RPython framework. Our performance evaluation that\\nruns a program with a realistic workload showed that 2SOM improved, when\\ncompared against an RPython-based VM, warm-up performance by 15\\\\%, with merely\\na 5\\\\% reduction in peak performance.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-04-24T11:51:28Z\"}"}
