{"value":"{\"aid\": \"http://arxiv.org/abs/2505.00289v1\", \"title\": \"PatchFuzz: Patch Fuzzing for JavaScript Engines\", \"summary\": \"Patch fuzzing is a technique aimed at identifying vulnerabilities that arise\\nfrom newly patched code. While researchers have made efforts to apply patch\\nfuzzing to testing JavaScript engines with considerable success, these efforts\\nhave been limited to using ordinary test cases or publicly available\\nvulnerability PoCs (Proof of Concepts) as seeds, and the sustainability of\\nthese approaches is hindered by the challenges associated with automating the\\nPoC collection. To address these limitations, we propose an end-to-end\\nsustainable approach for JavaScript engine patch fuzzing, named PatchFuzz. It\\nautomates the collection of PoCs of a broader range of historical\\nvulnerabilities and leverages both the PoCs and their corresponding patches to\\nuncover new vulnerabilities more effectively. PatchFuzz starts by recognizing\\ngit commits which intend to fix security bugs. Subsequently, it extracts and\\nprocesses PoCs from these commits to form the seeds for fuzzing, while\\nutilizing code revisions to focus limited fuzzing resources on the more\\nvulnerable code areas through selective instrumentation. The mutation strategy\\nof PatchFuzz is also optimized to maximize the potential of the PoCs.\\nExperimental results demonstrate the effectiveness of PatchFuzz. Notably, 54\\nbugs across six popular JavaScript engines have been exposed and a total of\\n$62,500 bounties has been received.\", \"main_category\": \"cs.CR\", \"categories\": \"cs.CR,cs.SE\", \"published\": \"2025-05-01T04:26:21Z\"}"}
