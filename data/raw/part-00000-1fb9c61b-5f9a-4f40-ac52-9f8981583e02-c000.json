{"value":"{\"aid\": \"http://arxiv.org/abs/2503.21733v1\", \"title\": \"Fully dynamic biconnectivity in $\\\\tilde{\\\\mathcal{O}}(\\\\log^2 n)$ time\", \"summary\": \"We present a deterministic fully-dynamic data structure for maintaining\\ninformation about the cut-vertices in a graph; i.e. the vertices whose removal\\nwould disconnect the graph. Our data structure supports insertion and deletion\\nof edges, as well as queries to whether a pair of connected vertices are either\\nbiconnected, or can be separated by a cutvertex, and in the latter case we\\nsupport access to separating cutvertices. All update operations are supported\\nin amortized $O(\\\\log^2 n \\\\log^2 \\\\log n)$ time, and queries take worst-case\\n$O(\\\\log n \\\\log^2 \\\\log n)$ time. Note that these time bounds match the current\\nbest for deterministic dynamic connectivity up to $\\\\log \\\\log n$ factors.\\n  We obtain our improved running time by a series of reductions from the\\noriginal problem into well-defined data structure problems. While we do apply\\nthe well-known techniques for improving running time of two-edge connectivity\\n[STOC'00, SODA'18], these techniques alone do not lead to an update time of\\n$\\\\tilde{O}(\\\\log^3 n)$, let alone the $\\\\tilde{O}(\\\\log^2 n)$ we give as a final\\nresult.\\n  Our contributions include a formally defined transient expose operation,\\nwhich can be thought of as a cheaper read-only expose operation on a top tree.\\nFor each vertex in the graph, we maintain a data structure over its neighbors,\\nand in this data structure we apply biasing (twice) to save two $\\\\tilde{O}(\\\\log\\nn)$ factors. One of these biasing techniques is a new biased disjoint sets data\\nstructure, which may be of independent interest. Moreover, in this neighborhood\\ndata structure, we facilitate that the vertex can select two VIP neighbors that\\nget special treatment, corresponding to its potentially two neighbors on an\\nexposed path, improving a $\\\\log n$-time operation down to constant time. It is\\nthis combination of VIP neighbors with the transient expose that saves an\\n$\\\\tilde{O}(\\\\log n)$-factor from another bottleneck.\", \"main_category\": \"cs.DS\", \"categories\": \"cs.DS\", \"published\": \"2025-03-27T17:47:18Z\"}"}
