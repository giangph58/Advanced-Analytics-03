{"value":"{\"aid\": \"http://arxiv.org/abs/2504.11961v1\", \"title\": \"zkFuzz: Foundation and Framework for Effective Fuzzing of Zero-Knowledge\\n  Circuits\", \"summary\": \"Zero-knowledge (ZK) circuits enable privacy-preserving computations and are\\ncentral to many cryptographic protocols. Systems like Circom simplify ZK\\ndevelopment by combining witness computation and circuit constraints in one\\nprogram. However, even small errors can compromise security of ZK programs\\n--under-constrained circuits may accept invalid witnesses, while\\nover-constrained ones may reject valid ones. Static analyzers are often\\nimprecise with high false positives, and formal tools struggle with real-world\\ncircuit scale. Additionally, existing tools overlook several critical\\nbehaviors, such as intermediate computations and program aborts, and thus miss\\nmany vulnerabilities.\\n  Our theoretical contribution is the Trace-Constraint Consistency Test (TCCT),\\na foundational language-independent formulation of ZK circuit bugs that defines\\nbugs as discrepancies between the execution traces of the computation and the\\ncircuit constraints. TCCT captures both intermediate computations and program\\naborts, detecting bugs that elude prior tools.\\n  Our systems contribution is zkFuzz, a novel program mutation-based fuzzing\\nframework for detecting TCCT violations. zkFuzz systematically mutates the\\ncomputational logic of Zk programs guided by a novel fitness function, and\\ninjects carefully crafted inputs using tailored heuristics to expose bugs. We\\nevaluated zkFuzz on 354 real-world ZK circuits written in Circom, a leading\\nprogramming system for ZK development. zkFuzz successfully identified 66 bugs,\\nincluding 38 zero-days --18 of which were confirmed by developers and 6 fixed,\\nearning bug bounties.\", \"main_category\": \"cs.CR\", \"categories\": \"cs.CR,cs.SE\", \"published\": \"2025-04-16T10:43:48Z\"}"}
