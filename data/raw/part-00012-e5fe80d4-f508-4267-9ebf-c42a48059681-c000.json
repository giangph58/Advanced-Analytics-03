{"value":"{\"aid\": \"http://arxiv.org/abs/2504.06688v1\", \"title\": \"Efficient Timestamping for Sampling-based Race Detection\", \"summary\": \"Dynamic race detection based on the happens before (HB) partial order has now\\nbecome the de facto approach to quickly identify data races in multi-threaded\\nsoftware. Most practical implementations for detecting these races use\\ntimestamps to infer causality between events and detect races based on these\\ntimestamps. Such an algorithm updates timestamps (stored in vector clocks) at\\nevery event in the execution, and is known to induce excessive overhead. Random\\nsampling has emerged as a promising algorithmic paradigm to offset this\\noverhead. It offers the promise of making sound race detection scalable. In\\nthis work we consider the task of designing an efficient sampling based race\\ndetector with low overhead for timestamping when the number of sampled events\\nis much smaller than the total events in an execution. To solve this problem,\\nwe propose (1) a new notion of freshness timestamp, (2) a new data structure to\\nstore timestamps, and (3) an algorithm that uses a combination of them to\\nreduce the cost of timestamping in sampling based race detection. Further, we\\nprove that our algorithm is close to optimal -- the number of vector clock\\ntraversals is bounded by the number of sampled events and number of threads,\\nand further, on any given dynamic execution, the cost of timestamping due to\\nour algorithm is close to the amount of work any timestamping-based algorithm\\nmust perform on that execution, that is it is instance optimal. Our evaluation\\non real world benchmarks demonstrates the effectiveness of our proposed\\nalgorithm over prior timestamping algorithms that are agnostic to sampling.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-04-09T08:49:24Z\"}"}
