{"value":"{\"aid\": \"http://arxiv.org/abs/2503.21691v1\", \"title\": \"Place Capability Graphs: A General-Purpose Model of Rust's Ownership and\\n  Borrowing Guarantees\", \"summary\": \"Rust's novel type system has proved an attractive target for verification and\\nprogram analysis tools, due to the rich guarantees it provides for controlling\\naliasing and mutability. However, fully understanding, extracting and\\nexploiting these guarantees is subtle and challenging: existing models for\\nRust's type checking either support a smaller idealised language disconnected\\nfrom real-world Rust code, or come with severe limitations in terms of precise\\nmodelling of Rust borrows, composite types storing them, function signatures\\nand loops.\\n  In this paper, we present a novel model of Rust's type-checking called Place\\nCapability Graphs, which lifts these limitations, and which can be directly\\ncalculated from the Rust compiler's own programmatic representations and\\nanalyses. We demonstrate that our model supports over 98% of Rust functions in\\nthe most popular public crates, and show its suitability as a general-purpose\\nbasis for verification and program analysis tools by developing promising new\\nprototype versions of the existing Flowistry and Prusti tools.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-03-27T16:55:41Z\"}"}
