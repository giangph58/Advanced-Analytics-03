{"value":"{\"aid\": \"http://arxiv.org/abs/2504.17542v1\", \"title\": \"Large Language Model-Driven Concolic Execution for Highly Structured\\n  Test Input Generation\", \"summary\": \"How can we perform concolic execution to generate highly structured test\\ninputs for systematically testing parsing programs? Existing concolic execution\\nengines are significantly restricted by (1) input structure-agnostic path\\nconstraint selection, leading to the waste of testing effort or missing\\ncoverage; (2) limited constraint-solving capability, yielding many\\nsyntactically invalid test inputs; (3) reliance on manual acquisition of highly\\nstructured seed inputs, resulting in non-continuous testing.\\n  This paper proposes Cottontail, a new Large Language Model (LLM)-driven\\nconcolic execution engine, to mitigate the above limitations. A more complete\\nprogram path representation, named Expressive Structural Coverage Tree (ESCT),\\nis first constructed to select structure-aware path constraints. Later, an\\nLLM-driven constraint solver based on a Solve-Complete paradigm is designed to\\nsolve the path constraints smartly to get test inputs that are not only\\nsatisfiable to the constraints but also valid to the input syntax. Finally, a\\nhistory-guided seed acquisition is employed to obtain new highly structured\\ntest inputs either before testing starts or after testing is saturated.\\n  We implemented Cottontail on top of SymCC and evaluated eight extensively\\ntested open-source libraries across four different formats (XML, SQL,\\nJavaScript, and JSON). The experimental result is promising: it shows that\\nCottontail outperforms state-of-the-art approaches (SymCC and Marco) by 14.15%\\nand 14.31% in terms of line coverage. Besides, Cottontail found 6 previously\\nunknown vulnerabilities (six new CVEs have been assigned). We have reported\\nthese issues to developers, and 4 out of them have been fixed so far.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE\", \"published\": \"2025-04-24T13:32:20Z\"}"}
