{"value":"{\"aid\": \"http://arxiv.org/abs/2504.15254v1\", \"title\": \"CRUST-Bench: A Comprehensive Benchmark for C-to-safe-Rust Transpilation\", \"summary\": \"C-to-Rust transpilation is essential for modernizing legacy C code while\\nenhancing safety and interoperability with modern Rust ecosystems. However, no\\ndataset currently exists for evaluating whether a system can transpile C into\\nsafe Rust that passes a set of test cases. We introduce CRUST-Bench, a dataset\\nof 100 C repositories, each paired with manually-written interfaces in safe\\nRust as well as test cases that can be used to validate correctness of the\\ntranspilation. By considering entire repositories rather than isolated\\nfunctions, CRUST-Bench captures the challenges of translating complex projects\\nwith dependencies across multiple files. The provided Rust interfaces provide\\nexplicit specifications that ensure adherence to idiomatic, memory-safe Rust\\npatterns, while the accompanying test cases enforce functional correctness. We\\nevaluate state-of-the-art large language models (LLMs) on this task and find\\nthat safe and idiomatic Rust generation is still a challenging problem for\\nvarious state-of-the-art methods and techniques. We also provide insights into\\nthe errors LLMs usually make in transpiling code from C to safe Rust. The best\\nperforming model, OpenAI o1, is able to solve only 15 tasks in a single-shot\\nsetting. Improvements on CRUST-Bench would lead to improved transpilation\\nsystems that can reason about complex scenarios and help in migrating legacy\\ncodebases from C into languages like Rust that ensure memory safety. You can\\nfind the dataset and code at https://github.com/anirudhkhatry/CRUST-bench.\", \"main_category\": \"cs.SE\", \"categories\": \"cs.SE,cs.CL\", \"published\": \"2025-04-21T17:33:33Z\"}"}
