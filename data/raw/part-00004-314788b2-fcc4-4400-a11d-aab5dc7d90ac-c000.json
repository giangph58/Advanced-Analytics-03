{"value":"{\"aid\": \"http://arxiv.org/abs/2504.10369v1\", \"title\": \"SymRTLO: Enhancing RTL Code Optimization with LLMs and Neuron-Inspired\\n  Symbolic Reasoning\", \"summary\": \"Optimizing Register Transfer Level (RTL) code is crucial for improving the\\npower, performance, and area (PPA) of digital circuits in the early stages of\\nsynthesis. Manual rewriting, guided by synthesis feedback, can yield\\nhigh-quality results but is time-consuming and error-prone. Most existing\\ncompiler-based approaches have difficulty handling complex design constraints.\\nLarge Language Model (LLM)-based methods have emerged as a promising\\nalternative to address these challenges. However, LLM-based approaches often\\nface difficulties in ensuring alignment between the generated code and the\\nprovided prompts. This paper presents SymRTLO, a novel neuron-symbolic RTL\\noptimization framework that seamlessly integrates LLM-based code rewriting with\\nsymbolic reasoning techniques. Our method incorporates a retrieval-augmented\\ngeneration (RAG) system of optimization rules and Abstract Syntax Tree\\n(AST)-based templates, enabling LLM-based rewriting that maintains syntactic\\ncorrectness while minimizing undesired circuit behaviors. A symbolic module is\\nproposed for analyzing and optimizing finite state machine (FSM) logic,\\nallowing fine-grained state merging and partial specification handling beyond\\nthe scope of pattern-based compilers. Furthermore, a fast verification\\npipeline, combining formal equivalence checks with test-driven validation,\\nfurther reduces the complexity of verification. Experiments on the RTL-Rewriter\\nbenchmark with Synopsys Design Compiler and Yosys show that SymRTLO improves\\npower, performance, and area (PPA) by up to 43.9%, 62.5%, and 51.1%,\\nrespectively, compared to the state-of-the-art methods.\", \"main_category\": \"cs.AR\", \"categories\": \"cs.AR,cs.AI,cs.LG,cs.PL\", \"published\": \"2025-04-14T16:15:55Z\"}"}
