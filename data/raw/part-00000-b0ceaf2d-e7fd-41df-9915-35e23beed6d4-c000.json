{"value":"{\"aid\": \"http://arxiv.org/abs/2504.20485v1\", \"title\": \"Sleeping Giants -- Activating Dormant Java Deserialization Gadget Chains\\n  through Stealthy Code Changes\", \"summary\": \"Java deserialization gadget chains are a well-researched critical software\\nweakness. The vast majority of known gadget chains rely on gadgets from\\nsoftware dependencies. Furthermore, it has been shown that small code changes\\nin dependencies have enabled these gadget chains. This makes gadget chain\\ndetection a purely reactive endeavor. Even if one dependency's deployment\\npipeline employs gadget chain detection, a gadget chain can still result from\\ngadgets in other dependencies. In this work, we assess how likely small code\\nchanges are to enable a gadget chain. These changes could either be accidental\\nor intentional as part of a supply chain attack. Specifically, we show that\\nclass serializability is a strongly fluctuating property over a dependency's\\nevolution. Then, we investigate three change patterns by which an attacker\\ncould stealthily introduce gadgets into a dependency. We apply these patterns\\nto 533 dependencies and run three state-of-the-art gadget chain detectors both\\non the original and the modified dependencies. The tools detect that applying\\nthe modification patterns can activate/inject gadget chains in 26.08% of the\\ndependencies we selected. Finally, we verify the newly detected chains. As\\nsuch, we identify dormant gadget chains in 53 dependencies that could be added\\nthrough minor code modifications. This both shows that Java deserialization\\ngadget chains are a broad liability to software and proves dormant gadget\\nchains as a lucrative supply chain attack vector.\", \"main_category\": \"cs.CR\", \"categories\": \"cs.CR,cs.SE\", \"published\": \"2025-04-29T07:24:34Z\"}"}
