{"value":"{\"aid\": \"http://arxiv.org/abs/2505.04153v1\", \"title\": \"Global Hash Tables Strike Back! An Analysis of Parallel GROUP BY\\n  Aggregation\", \"summary\": \"Efficiently computing group aggregations (i.e., GROUP BY) on modern many-core\\narchitectures is critical for analytic database systems. Today's engines\\npredominately use a partitioned approach to group aggregation, in which an\\nincoming data stream is partitioned by key values so that every row for a\\nparticular key is sent to the same thread. In this paper, we revisit a simpler\\nstrategy: a fully concurrent group aggregation technique using a shared global\\nhash table. While approaches using general-purpose concurrent hash tables have\\ngenerally been found to perform worse than partitioning-based approaches, we\\nargue that the key ingredient is customizing the concurrent hash table for the\\nspecific task of group aggregation. Through extensive experiments on synthetic\\nworkloads (varying key cardinality, skew, and thread counts), we demonstrate\\nthat a purpose-built concurrent hash table can match or surpass\\npartitioning-based techniques. We also analyze the operational characteristics\\nof both techniques, including resizing costs and memory pressure. In the\\nprocess, we derive practical guidelines for database implementers. Overall, our\\nanalysis indicates that fully concurrent group aggregation is a viable\\nalternative to partitioning.\", \"main_category\": \"cs.DB\", \"categories\": \"cs.DB\", \"published\": \"2025-05-07T06:06:46Z\"}"}
