{"value":"{\"aid\": \"http://arxiv.org/abs/2503.23985v1\", \"title\": \"An Empirical Study of Rust-Specific Bugs in the rustc Compiler\", \"summary\": \"Rust is gaining popularity for its well-known memory safety guarantees and\\nhigh performance, distinguishing it from C/C++ and JVM-based languages. Its\\ncompiler, rustc, enforces these guarantees through specialized mechanisms such\\nas trait solving, borrow checking, and specific optimizations. However, Rust's\\nunique language mechanisms introduce complexity to its compiler, leading to\\nRust-specific compiler bugs that are less common in traditional compilers. With\\nRust's increasing adoption in safety-critical domains, understanding these\\nlanguage mechanisms and their impact on compiler bugs is essential for\\nimproving the reliability of both rustc and Rust programs. Yet, we still lack a\\nlarge-scale, detailed, and in-depth study of Rust-specific bugs in rustc.\\n  To bridge this gap, this work conducts a comprehensive and systematic study\\nof Rust-specific bugs in rustc, with a particular focus on the components that\\nsupport its unique language features. Our analysis examines issues and fixes\\nreported between 2022 and 2024, with a manual review of 301 valid issues. We\\ncategorize these bugs based on their causes, symptoms, affected compilation\\nstages, and test case characteristics. Additionally, we evaluate existing rustc\\ntesting tools to assess their effectiveness and limitations. Our key findings\\ninclude: (1) rustc bugs primarily arise from Rust's type system and lifetime\\nmodel, with frequent errors in the High-Level Intermediate Representation (HIR)\\nand Mid-Level Intermediate Representation (MIR) modules due to complex checkers\\nand optimizations; (2) bug-revealing test cases often involve unstable\\nfeatures, advanced trait usages, lifetime annotations, standard APIs, and\\nspecific optimization levels; (3) while both valid and invalid programs can\\ntrigger bugs, existing testing tools struggle to detect non-crash errors,\\nunderscoring the need for further advancements in rustc testing.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-03-31T11:55:04Z\"}"}
