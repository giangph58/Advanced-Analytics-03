{"value":"{\"aid\": \"http://arxiv.org/abs/2504.07409v1\", \"title\": \"RLibm-MultiRound: Correctly Rounded Math Libraries Without Worrying\\n  about the Application's Rounding Mode\", \"summary\": \"Our RLibm project generates a single implementation for an elementary\\nfunction that produces correctly rounded results for multiple rounding modes\\nand representations with up to 32-bits. They are appealing for developing fast\\nreference libraries without double rounding issues. The key insight is to build\\npolynomials that produce the correctly rounded result for a representation with\\ntwo additional bits when compared to the largest target representation and with\\nthe \\\"non-standard\\\" round-to-odd rounding mode, which makes double rounding the\\nRLibm math library result to any smaller target representation innocuous. The\\nresulting approximations generated by the RLibm approach are implemented with\\nmachine supported floating-point operations with the round-to-nearest rounding\\nmode. When an application uses a rounding mode other than the round-to-nearest\\nmode, the RLibm math library saves the application's rounding mode, changes the\\nsystem's rounding mode to round-to-nearest, computes the correctly rounded\\nresult, and restores the application's rounding mode. This frequent change of\\nrounding modes has a performance cost.\\n  This paper proposes two new methods, which we call rounding-invariant outputs\\nand rounding-invariant input bounds, to avoid the frequent changes to the\\nrounding mode and the dependence on the round-to-nearest mode. First, our new\\nrounding-invariant outputs method proposes using the round-to-zero rounding\\nmode to implement RLibm's polynomial approximations. We propose fast,\\nerror-free transformations to emulate a round-to-zero result from any standard\\nrounding mode without changing the rounding mode. Second, our\\nrounding-invariant input bounds method factors any rounding error due to\\ndifferent rounding modes using interval bounds in the RLibm pipeline. Both\\nmethods make a different set of trade-offs and improve the performance of\\nresulting libraries by more than 2X.\", \"main_category\": \"cs.MS\", \"categories\": \"cs.MS\", \"published\": \"2025-04-10T03:02:52Z\"}"}
