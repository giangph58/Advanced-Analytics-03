{"value":"{\"aid\": \"http://arxiv.org/abs/2504.19852v1\", \"title\": \"A Formal Framework for Naturally Specifying and Verifying Sequential\\n  Algorithms\", \"summary\": \"Current approaches for formal verification of algorithms face important\\nlimitations. For specification, they cannot express algorithms naturally and\\nconcisely, especially for algorithms with states and flexible control flow. For\\nverification, formal proof based on Hoare logic cannot reflect the logical\\nstructure of natural proof. To address these challenges, we introduce a formal\\nframework for naturally specifying and verifying sequential algorithms in Coq.\\nWe use the state relation monad to integrate Coq's expressive type system with\\nthe flexible control flow of imperative languages. It supports nondeterministic\\noperations and customizable program states, enabling specifying algorithms at\\nan appropriate level of abstraction. For verification, we build a Hoare logic\\nfor the monad and propose a novel two-stage proof approach that separates\\nnatural logical reasoning from mechanical composition. It reflects the logical\\nstructure of natural proof, enhancing modularity and readability. We evaluate\\nthe framework by formalizing the Depth-First Search (DFS) algorithm and\\nverifying the Knuth-Morris-Pratt (KMP) algorithm.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-04-28T14:47:20Z\"}"}
