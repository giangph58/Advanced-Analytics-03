{"value":"{\"aid\": \"http://arxiv.org/abs/2505.00449v1\", \"title\": \"An approach for modularly verifying the core of Rust's atomic reference\\n  counting algorithm against the (X)C20 memory consistency model\", \"summary\": \"We propose an approach for modular verification of programs that use\\nrelaxed-consistency atomic memory access primitives and fences, sufficient for\\nverifying the core of Rust's Atomic Reference Counting (ARC) algorithm, and we\\nargue its soundness, when combined with a simple static analysis and admitting\\nan open sub-problem, with respect to the C20 memory consistency model, as well\\nas, even in the absence of any static analysis and without any assumptions,\\nwith respect to XC20, a recently proposed minor strengthening of C20 that rules\\nout out-of-thin-air behaviors but allows load buffering. In contrast to\\nexisting work on verifying ARC, we do not assume acyclicity of the union of the\\nprogram-order and reads-from relations. We define an interleaving operational\\nsemantics, prove its soundness with respect to (X)C20's axiomatic semantics,\\nand then apply any existing program logic for fine-grained interleaving\\nconcurrency, such as Iris.\", \"main_category\": \"cs.PL\", \"categories\": \"cs.PL\", \"published\": \"2025-05-01T10:51:20Z\"}"}
